Programa ::= Clase* Clase_Main

Clase ::= 'class' 'id' ('under' 'id' | ) '{' ((Acceso Vars)+ | ) ((Func)+ | ) '}'

Clase_Main ::= 'class' 'Main' '{' ((Acceso Vars)+ | ) ((Func)+ | ) Main '}'

Vars ::= (Tipo ('id' ('[' Exp_arit ']' | ) ('=' Exp | )) (',' 'id' ('[' Exp_arit ']' | ) ('=' Exp | ))* | 'id' ('id' ('[' Exp_arit ']' | ) ('=' Exp_objeto | )) (',' 'id' ('[' Exp_arit ']' | ) ('=' Exp_objeto | ))*) ';'

Tipo ::= 'numeral' | 'real' | 'bool' | 'char' | 'string'

Acceso ::= 'hidden' | 'visible' | 

Func ::= Acceso (Tipo | 'without') 'id' Params Cuerpo_func

Main ::= 'visible' 'without' 'main' '(' ')' Cuerpo_func

Params ::= '(' ((Tipo 'id') (',' Tipo 'id')* | ) ')'

Cuerpo_func ::= '{' Vars Estatuto* '}'

Estatuto ::= While | For | Asignacion | Condicion | Escritura | Lectura | Llamada_func | Return

Llamada_func ::= ( ('this' | 'id' ('[' Exp_arit ']' | )) '.' | ) 'id' '(' (Exp (',' Exp)* | ) ')' ';'

Cte_bool ::= 'true' | 'false'

Exp ::= Exp_bool | Exp_arit | Exp_str | Exp_objeto

Exp_objeto ::= Atom | 'new' 'id' '(' ')'

Return ::= 'return' Exp ';'

While ::= 'while' '(' Exp_bool ')' '{' Estatuto* '}'

Exp_bool ::= Termino_bool ('||' Termino_bool)*

Termino_bool ::= Exp_b ('&&' Exp_b)*

Exp_b ::= ('!' | ) (Llamada_func | Cte_bool | Comparacion | Exp_bool | Atom | '(' Exp_bool ')')

Comparacion ::= ( Exp_arit ('>' | '<' | '==' | '!=' | '<=' | '>=') Exp_arit ) | (Exp_str '==' Exp_str)

Exp_arit ::= Termino (('+' | '-') Termino)*

Termino ::= Factor (('*' | '/' | '%') Factor)*

Factor ::= ('(' Exp_arit ')' | ('-' | '+' | ) ( 'cte_numeral' | 'cte_real' | Atom | Llamada_func))

For ::= 'for' '(' Atom '=' Exp ';' Exp_bool ';' Asignacion ')' '{' Estatuto* '}'

Exp_str ::= ( 'const_str' | 'const_char' | Atom | Llamada_func)

Asignacion ::= Atom '=' Exp ';'

Atom ::= ( ( ('id' ( '[' Exp_arit ']' | )) ('.' 'id' ( '[' Exp_arit ']' | ) | ) ) | 'this' '.' 'id' ( '[' Exp_arit ']' | ) )

Condicion ::= 'if' '(' Exp_bool ')' '{' Estatuto* '}' ('else' 'if' '(' Exp_bool ')' '{' Estatuto* '}')* 'else' '{' Estatuto* '}'

Lectura ::= 'input' '(' Atom ')' ';'

Escritura ::= 'output' '(' Exp ')' ';'