Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> ciclo_clase clase_main
Rule 2     ciclo_clase -> empty
Rule 3     ciclo_clase -> ciclo_clase clase
Rule 4     clase -> CLASS ID herencia LLIZQ ciclo_vars ciclo_func LLDER
Rule 5     herencia -> empty
Rule 6     herencia -> UNDER ID
Rule 7     ciclo_vars -> empty
Rule 8     ciclo_vars -> ciclo_vars acceso vars
Rule 9     ciclo_func -> empty
Rule 10    ciclo_func -> ciclo_func func
Rule 11    clase_main -> CLASS MAIN LLIZQ ciclo_vars ciclo_func main LLDER
Rule 12    vars -> var_op PYC
Rule 13    var_op -> tipo ciclo_tipo
Rule 14    var_op -> ID ciclo_id
Rule 15    ciclo_tipo -> ID arreglo asignacion_exp
Rule 16    ciclo_tipo -> ciclo_id COMA ID arreglo asignacion_exp
Rule 17    ciclo_id -> ID arreglo asignacion_obj
Rule 18    ciclo_id -> ciclo_id COMA ID arreglo asignacion_obj
Rule 19    arreglo -> empty
Rule 20    arreglo -> CODER exp_arit COIZQ
Rule 21    asignacion_exp -> empty
Rule 22    asignacion_exp -> IGUAL exp
Rule 23    asignacion_obj -> empty
Rule 24    asignacion_obj -> IGUAL exp_objeto
Rule 25    tipo -> NUMERAL
Rule 26    tipo -> REAL
Rule 27    tipo -> BOOL
Rule 28    tipo -> CHAR
Rule 29    tipo -> STRING
Rule 30    acceso -> empty
Rule 31    acceso -> HIDDEN
Rule 32    acceso -> VISIBLE
Rule 33    func -> acceso retorno ID params cuerpo_func
Rule 34    retorno -> tipo
Rule 35    retorno -> WITHOUT
Rule 36    main -> VISIBLE WITHOUT MAIN PIZQ PDER cuerpo_func
Rule 37    params -> PIZQ params_op PDER
Rule 38    params_op -> empty
Rule 39    params_op -> params_ciclo
Rule 40    params_ciclo -> tipo ID
Rule 41    params_ciclo -> params_ciclo COMA tipo ID
Rule 42    cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER
Rule 43    ciclo_estatuto -> empty
Rule 44    ciclo_estatuto -> ciclo_estatuto estatuto
Rule 45    estatuto -> while
Rule 46    estatuto -> for
Rule 47    estatuto -> asignacion
Rule 48    estatuto -> condicion
Rule 49    estatuto -> escritura
Rule 50    estatuto -> lectura
Rule 51    estatuto -> llamada_func
Rule 52    estatuto -> return
Rule 53    llamada_func -> caller ID PIZQ exp_op PDER PYC
Rule 54    caller -> empty
Rule 55    caller -> THIS PUNTO
Rule 56    caller -> ID arreglo PUNTO
Rule 57    exp_op -> empty
Rule 58    exp_op -> exp_ciclo
Rule 59    exp_ciclo -> exp
Rule 60    exp_ciclo -> exp_ciclo COMA exp
Rule 61    cte_bool -> TRUE
Rule 62    cte_bool -> FALSE
Rule 63    exp -> exp_bool
Rule 64    exp -> exp_arit
Rule 65    exp -> exp_str
Rule 66    exp -> exp_objeto
Rule 67    exp_objeto -> atom
Rule 68    exp_objeto -> NEW ID PIZQ PDER
Rule 69    return -> RETURN exp PYC
Rule 70    while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
Rule 71    exp_bool -> termino_bool
Rule 72    exp_bool -> exp_bool OR termino_bool
Rule 73    termino_bool -> exp_b
Rule 74    termino_bool -> termino_bool AND exp_b
Rule 75    exp_b -> negacion op_exp_b
Rule 76    negacion -> empty
Rule 77    negacion -> NOT
Rule 78    op_exp_b -> llamada_func
Rule 79    op_exp_b -> cte_bool
Rule 80    op_exp_b -> comparacion
Rule 81    op_exp_b -> exp_bool
Rule 82    op_exp_b -> atom
Rule 83    op_exp_b -> PIZQ exp_bool PDER
Rule 84    comparacion -> exp_arit op_comp exp_arit
Rule 85    comparacion -> exp_str IGUALC exp_str
Rule 86    op_comp -> MAYOR
Rule 87    op_comp -> MENOR
Rule 88    op_comp -> IGUALC
Rule 89    op_comp -> NOTIGUAL
Rule 90    op_comp -> MENORIGUAL
Rule 91    op_comp -> MAYORIGUAL
Rule 92    exp_arit -> termino
Rule 93    exp_arit -> exp_arit MAS termino
Rule 94    exp_arit -> exp_arit MENOS termino
Rule 95    termino -> factor
Rule 96    termino -> termino POR factor
Rule 97    termino -> termino ENTRE factor
Rule 98    termino -> termino MOD factor
Rule 99    factor -> PIZQ exp_arit PDER
Rule 100   factor -> factor_oper_op factor_cte_op
Rule 101   factor_oper_op -> empty
Rule 102   factor_oper_op -> MENOS
Rule 103   factor_oper_op -> MAS
Rule 104   factor_cte_op -> CTE_NUMERAL
Rule 105   factor_cte_op -> CTE_REAL
Rule 106   factor_cte_op -> atom
Rule 107   factor_cte_op -> llamada_func
Rule 108   for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
Rule 109   exp_str -> CTE_STR
Rule 110   exp_str -> CTE_CHAR
Rule 111   exp_str -> atom
Rule 112   exp_str -> llamada_func
Rule 113   asignacion -> atom IGUAL exp PYC
Rule 114   atom -> ID arreglo atributo_arr
Rule 115   atom -> ID arreglo
Rule 116   atom -> THIS atributo_arr
Rule 117   atributo_arr -> PUNTO ID arreglo
Rule 118   condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER
Rule 119   ciclo_cond -> IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
Rule 120   ciclo_cond -> ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
Rule 121   lectura -> INPUT PIZQ atom PDER PYC
Rule 122   escritura -> OUTPUT PIZQ exp PDER PYC
Rule 123   empty -> <empty>

Terminals, with rules where they appear

AND                  : 74
BOOL                 : 27
CHAR                 : 28
CLASS                : 4 11
CODER                : 20
COIZQ                : 20
COMA                 : 16 18 41 60
CTE_CHAR             : 110
CTE_NUMERAL          : 104
CTE_REAL             : 105
CTE_STR              : 109
ELSE                 : 118 120
ENTRE                : 97
FALSE                : 62
FOR                  : 108
HIDDEN               : 31
ID                   : 4 6 14 15 16 17 18 33 40 41 53 56 68 114 115 117
IF                   : 119 120
IGUAL                : 22 24 108 113
IGUALC               : 85 88
INPUT                : 121
LLDER                : 4 11 42 70 108 118 119 120
LLIZQ                : 4 11 42 70 108 118 119 120
MAIN                 : 11 36
MAS                  : 93 103
MAYOR                : 86
MAYORIGUAL           : 91
MENOR                : 87
MENORIGUAL           : 90
MENOS                : 94 102
MOD                  : 98
NEW                  : 68
NOT                  : 77
NOTIGUAL             : 89
NUMERAL              : 25
OR                   : 72
OUTPUT               : 122
PDER                 : 36 37 53 68 70 83 99 108 119 120 121 122
PIZQ                 : 36 37 53 68 70 83 99 108 119 120 121 122
POR                  : 96
PUNTO                : 55 56 117
PYC                  : 12 53 69 108 113 121 122
REAL                 : 26
RETURN               : 69
STRING               : 29
THIS                 : 55 116
TRUE                 : 61
UNDER                : 6
VISIBLE              : 32 36
WHILE                : 70
WITHOUT              : 35 36
error                : 

Nonterminals, with rules where they appear

acceso               : 8 33
arreglo              : 15 16 17 18 56 114 115 117
asignacion           : 47 108
asignacion_exp       : 15 16
asignacion_obj       : 17 18
atom                 : 67 82 106 108 111 113 121
atributo_arr         : 114 116
caller               : 53
ciclo_clase          : 1 3
ciclo_cond           : 118 120
ciclo_estatuto       : 42 44 70 108 118 119 120
ciclo_func           : 4 10 11
ciclo_id             : 14 16 18
ciclo_tipo           : 13
ciclo_vars           : 4 8 11
clase                : 3
clase_main           : 1
comparacion          : 80
condicion            : 48
cte_bool             : 79
cuerpo_func          : 33 36
empty                : 2 5 7 9 19 21 23 30 38 43 54 57 76 101
escritura            : 49
estatuto             : 44
exp                  : 22 59 60 69 108 113 122
exp_arit             : 20 64 84 84 93 94 99
exp_b                : 73 74
exp_bool             : 63 70 72 81 83 108 119 120
exp_ciclo            : 58 60
exp_objeto           : 24 66
exp_op               : 53
exp_str              : 65 85 85
factor               : 95 96 97 98
factor_cte_op        : 100
factor_oper_op       : 100
for                  : 46
func                 : 10
herencia             : 4
lectura              : 50
llamada_func         : 51 78 107 112
main                 : 11
negacion             : 75
op_comp              : 84
op_exp_b             : 75
params               : 33
params_ciclo         : 39 41
params_op            : 37
programa             : 0
retorno              : 33
return               : 52
termino              : 92 93 94 96 97 98
termino_bool         : 71 72 74
tipo                 : 13 34 40 41
var_op               : 12
vars                 : 8 42
while                : 45

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . ciclo_clase clase_main
    (2) ciclo_clase -> . empty
    (3) ciclo_clase -> . ciclo_clase clase
    (123) empty -> .

    CLASS           reduce using rule 123 (empty -> .)

    ciclo_clase                    shift and go to state 1
    programa                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (1) programa -> ciclo_clase . clase_main
    (3) ciclo_clase -> ciclo_clase . clase
    (11) clase_main -> . CLASS MAIN LLIZQ ciclo_vars ciclo_func main LLDER
    (4) clase -> . CLASS ID herencia LLIZQ ciclo_vars ciclo_func LLDER

    CLASS           shift and go to state 6

    clase_main                     shift and go to state 4
    clase                          shift and go to state 5

state 2

    (0) S' -> programa .



state 3

    (2) ciclo_clase -> empty .

    CLASS           reduce using rule 2 (ciclo_clase -> empty .)


state 4

    (1) programa -> ciclo_clase clase_main .

    $end            reduce using rule 1 (programa -> ciclo_clase clase_main .)


state 5

    (3) ciclo_clase -> ciclo_clase clase .

    CLASS           reduce using rule 3 (ciclo_clase -> ciclo_clase clase .)


state 6

    (11) clase_main -> CLASS . MAIN LLIZQ ciclo_vars ciclo_func main LLDER
    (4) clase -> CLASS . ID herencia LLIZQ ciclo_vars ciclo_func LLDER

    MAIN            shift and go to state 7
    ID              shift and go to state 8


state 7

    (11) clase_main -> CLASS MAIN . LLIZQ ciclo_vars ciclo_func main LLDER

    LLIZQ           shift and go to state 9


state 8

    (4) clase -> CLASS ID . herencia LLIZQ ciclo_vars ciclo_func LLDER
    (5) herencia -> . empty
    (6) herencia -> . UNDER ID
    (123) empty -> .

    UNDER           shift and go to state 10
    LLIZQ           reduce using rule 123 (empty -> .)

    herencia                       shift and go to state 11
    empty                          shift and go to state 12

state 9

    (11) clase_main -> CLASS MAIN LLIZQ . ciclo_vars ciclo_func main LLDER
    (7) ciclo_vars -> . empty
    (8) ciclo_vars -> . ciclo_vars acceso vars
    (123) empty -> .

    HIDDEN          reduce using rule 123 (empty -> .)
    VISIBLE         reduce using rule 123 (empty -> .)
    WITHOUT         reduce using rule 123 (empty -> .)
    NUMERAL         reduce using rule 123 (empty -> .)
    REAL            reduce using rule 123 (empty -> .)
    BOOL            reduce using rule 123 (empty -> .)
    CHAR            reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)

    ciclo_vars                     shift and go to state 13
    empty                          shift and go to state 14

state 10

    (6) herencia -> UNDER . ID

    ID              shift and go to state 15


state 11

    (4) clase -> CLASS ID herencia . LLIZQ ciclo_vars ciclo_func LLDER

    LLIZQ           shift and go to state 16


state 12

    (5) herencia -> empty .

    LLIZQ           reduce using rule 5 (herencia -> empty .)


state 13

    (11) clase_main -> CLASS MAIN LLIZQ ciclo_vars . ciclo_func main LLDER
    (8) ciclo_vars -> ciclo_vars . acceso vars
    (9) ciclo_func -> . empty
    (10) ciclo_func -> . ciclo_func func
    (30) acceso -> . empty
    (31) acceso -> . HIDDEN
    (32) acceso -> . VISIBLE
    (123) empty -> .

  ! shift/reduce conflict for VISIBLE resolved as shift
  ! shift/reduce conflict for HIDDEN resolved as shift
    HIDDEN          shift and go to state 20
    VISIBLE         shift and go to state 19
    WITHOUT         reduce using rule 123 (empty -> .)
    NUMERAL         reduce using rule 123 (empty -> .)
    REAL            reduce using rule 123 (empty -> .)
    BOOL            reduce using rule 123 (empty -> .)
    CHAR            reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)

  ! VISIBLE         [ reduce using rule 123 (empty -> .) ]
  ! HIDDEN          [ reduce using rule 123 (empty -> .) ]

    acceso                         shift and go to state 18
    ciclo_func                     shift and go to state 17
    empty                          shift and go to state 21

state 14

    (7) ciclo_vars -> empty .

    HIDDEN          reduce using rule 7 (ciclo_vars -> empty .)
    VISIBLE         reduce using rule 7 (ciclo_vars -> empty .)
    LLDER           reduce using rule 7 (ciclo_vars -> empty .)
    WITHOUT         reduce using rule 7 (ciclo_vars -> empty .)
    NUMERAL         reduce using rule 7 (ciclo_vars -> empty .)
    REAL            reduce using rule 7 (ciclo_vars -> empty .)
    BOOL            reduce using rule 7 (ciclo_vars -> empty .)
    CHAR            reduce using rule 7 (ciclo_vars -> empty .)
    STRING          reduce using rule 7 (ciclo_vars -> empty .)
    ID              reduce using rule 7 (ciclo_vars -> empty .)


state 15

    (6) herencia -> UNDER ID .

    LLIZQ           reduce using rule 6 (herencia -> UNDER ID .)


state 16

    (4) clase -> CLASS ID herencia LLIZQ . ciclo_vars ciclo_func LLDER
    (7) ciclo_vars -> . empty
    (8) ciclo_vars -> . ciclo_vars acceso vars
    (123) empty -> .

    HIDDEN          reduce using rule 123 (empty -> .)
    VISIBLE         reduce using rule 123 (empty -> .)
    LLDER           reduce using rule 123 (empty -> .)
    WITHOUT         reduce using rule 123 (empty -> .)
    NUMERAL         reduce using rule 123 (empty -> .)
    REAL            reduce using rule 123 (empty -> .)
    BOOL            reduce using rule 123 (empty -> .)
    CHAR            reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)

    ciclo_vars                     shift and go to state 22
    empty                          shift and go to state 14

state 17

    (11) clase_main -> CLASS MAIN LLIZQ ciclo_vars ciclo_func . main LLDER
    (10) ciclo_func -> ciclo_func . func
    (36) main -> . VISIBLE WITHOUT MAIN PIZQ PDER cuerpo_func
    (33) func -> . acceso retorno ID params cuerpo_func
    (30) acceso -> . empty
    (31) acceso -> . HIDDEN
    (32) acceso -> . VISIBLE
    (123) empty -> .

    VISIBLE         shift and go to state 24
    HIDDEN          shift and go to state 20
    WITHOUT         reduce using rule 123 (empty -> .)
    NUMERAL         reduce using rule 123 (empty -> .)
    REAL            reduce using rule 123 (empty -> .)
    BOOL            reduce using rule 123 (empty -> .)
    CHAR            reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    acceso                         shift and go to state 23
    func                           shift and go to state 25
    main                           shift and go to state 26
    empty                          shift and go to state 27

state 18

    (8) ciclo_vars -> ciclo_vars acceso . vars
    (12) vars -> . var_op PYC
    (13) var_op -> . tipo ciclo_tipo
    (14) var_op -> . ID ciclo_id
    (25) tipo -> . NUMERAL
    (26) tipo -> . REAL
    (27) tipo -> . BOOL
    (28) tipo -> . CHAR
    (29) tipo -> . STRING

    ID              shift and go to state 35
    NUMERAL         shift and go to state 30
    REAL            shift and go to state 28
    BOOL            shift and go to state 33
    CHAR            shift and go to state 29
    STRING          shift and go to state 36

    vars                           shift and go to state 31
    tipo                           shift and go to state 32
    var_op                         shift and go to state 34

state 19

    (32) acceso -> VISIBLE .

    ID              reduce using rule 32 (acceso -> VISIBLE .)
    NUMERAL         reduce using rule 32 (acceso -> VISIBLE .)
    REAL            reduce using rule 32 (acceso -> VISIBLE .)
    BOOL            reduce using rule 32 (acceso -> VISIBLE .)
    CHAR            reduce using rule 32 (acceso -> VISIBLE .)
    STRING          reduce using rule 32 (acceso -> VISIBLE .)
    WITHOUT         reduce using rule 32 (acceso -> VISIBLE .)


state 20

    (31) acceso -> HIDDEN .

    ID              reduce using rule 31 (acceso -> HIDDEN .)
    NUMERAL         reduce using rule 31 (acceso -> HIDDEN .)
    REAL            reduce using rule 31 (acceso -> HIDDEN .)
    BOOL            reduce using rule 31 (acceso -> HIDDEN .)
    CHAR            reduce using rule 31 (acceso -> HIDDEN .)
    STRING          reduce using rule 31 (acceso -> HIDDEN .)
    WITHOUT         reduce using rule 31 (acceso -> HIDDEN .)


state 21

    (9) ciclo_func -> empty .
    (30) acceso -> empty .

  ! reduce/reduce conflict for NUMERAL resolved using rule 9 (ciclo_func -> empty .)
  ! reduce/reduce conflict for REAL resolved using rule 9 (ciclo_func -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 9 (ciclo_func -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 9 (ciclo_func -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 9 (ciclo_func -> empty .)
    LLDER           reduce using rule 9 (ciclo_func -> empty .)
    HIDDEN          reduce using rule 9 (ciclo_func -> empty .)
    VISIBLE         reduce using rule 9 (ciclo_func -> empty .)
    WITHOUT         reduce using rule 9 (ciclo_func -> empty .)
    NUMERAL         reduce using rule 9 (ciclo_func -> empty .)
    REAL            reduce using rule 9 (ciclo_func -> empty .)
    BOOL            reduce using rule 9 (ciclo_func -> empty .)
    CHAR            reduce using rule 9 (ciclo_func -> empty .)
    STRING          reduce using rule 9 (ciclo_func -> empty .)
    ID              reduce using rule 30 (acceso -> empty .)

  ! NUMERAL         [ reduce using rule 30 (acceso -> empty .) ]
  ! REAL            [ reduce using rule 30 (acceso -> empty .) ]
  ! BOOL            [ reduce using rule 30 (acceso -> empty .) ]
  ! CHAR            [ reduce using rule 30 (acceso -> empty .) ]
  ! STRING          [ reduce using rule 30 (acceso -> empty .) ]


state 22

    (4) clase -> CLASS ID herencia LLIZQ ciclo_vars . ciclo_func LLDER
    (8) ciclo_vars -> ciclo_vars . acceso vars
    (9) ciclo_func -> . empty
    (10) ciclo_func -> . ciclo_func func
    (30) acceso -> . empty
    (31) acceso -> . HIDDEN
    (32) acceso -> . VISIBLE
    (123) empty -> .

  ! shift/reduce conflict for HIDDEN resolved as shift
  ! shift/reduce conflict for VISIBLE resolved as shift
    HIDDEN          shift and go to state 20
    VISIBLE         shift and go to state 19
    LLDER           reduce using rule 123 (empty -> .)
    WITHOUT         reduce using rule 123 (empty -> .)
    NUMERAL         reduce using rule 123 (empty -> .)
    REAL            reduce using rule 123 (empty -> .)
    BOOL            reduce using rule 123 (empty -> .)
    CHAR            reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)

  ! HIDDEN          [ reduce using rule 123 (empty -> .) ]
  ! VISIBLE         [ reduce using rule 123 (empty -> .) ]

    acceso                         shift and go to state 18
    ciclo_func                     shift and go to state 37
    empty                          shift and go to state 21

state 23

    (33) func -> acceso . retorno ID params cuerpo_func
    (34) retorno -> . tipo
    (35) retorno -> . WITHOUT
    (25) tipo -> . NUMERAL
    (26) tipo -> . REAL
    (27) tipo -> . BOOL
    (28) tipo -> . CHAR
    (29) tipo -> . STRING

    WITHOUT         shift and go to state 39
    NUMERAL         shift and go to state 30
    REAL            shift and go to state 28
    BOOL            shift and go to state 33
    CHAR            shift and go to state 29
    STRING          shift and go to state 36

    retorno                        shift and go to state 40
    tipo                           shift and go to state 38

state 24

    (36) main -> VISIBLE . WITHOUT MAIN PIZQ PDER cuerpo_func
    (32) acceso -> VISIBLE .

  ! shift/reduce conflict for WITHOUT resolved as shift
    WITHOUT         shift and go to state 41
    NUMERAL         reduce using rule 32 (acceso -> VISIBLE .)
    REAL            reduce using rule 32 (acceso -> VISIBLE .)
    BOOL            reduce using rule 32 (acceso -> VISIBLE .)
    CHAR            reduce using rule 32 (acceso -> VISIBLE .)
    STRING          reduce using rule 32 (acceso -> VISIBLE .)

  ! WITHOUT         [ reduce using rule 32 (acceso -> VISIBLE .) ]


state 25

    (10) ciclo_func -> ciclo_func func .

    LLDER           reduce using rule 10 (ciclo_func -> ciclo_func func .)
    HIDDEN          reduce using rule 10 (ciclo_func -> ciclo_func func .)
    VISIBLE         reduce using rule 10 (ciclo_func -> ciclo_func func .)
    WITHOUT         reduce using rule 10 (ciclo_func -> ciclo_func func .)
    NUMERAL         reduce using rule 10 (ciclo_func -> ciclo_func func .)
    REAL            reduce using rule 10 (ciclo_func -> ciclo_func func .)
    BOOL            reduce using rule 10 (ciclo_func -> ciclo_func func .)
    CHAR            reduce using rule 10 (ciclo_func -> ciclo_func func .)
    STRING          reduce using rule 10 (ciclo_func -> ciclo_func func .)


state 26

    (11) clase_main -> CLASS MAIN LLIZQ ciclo_vars ciclo_func main . LLDER

    LLDER           shift and go to state 42


state 27

    (30) acceso -> empty .

    WITHOUT         reduce using rule 30 (acceso -> empty .)
    NUMERAL         reduce using rule 30 (acceso -> empty .)
    REAL            reduce using rule 30 (acceso -> empty .)
    BOOL            reduce using rule 30 (acceso -> empty .)
    CHAR            reduce using rule 30 (acceso -> empty .)
    STRING          reduce using rule 30 (acceso -> empty .)


state 28

    (26) tipo -> REAL .

    ID              reduce using rule 26 (tipo -> REAL .)


state 29

    (28) tipo -> CHAR .

    ID              reduce using rule 28 (tipo -> CHAR .)


state 30

    (25) tipo -> NUMERAL .

    ID              reduce using rule 25 (tipo -> NUMERAL .)


state 31

    (8) ciclo_vars -> ciclo_vars acceso vars .

    HIDDEN          reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    VISIBLE         reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    LLDER           reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    WITHOUT         reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    NUMERAL         reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    REAL            reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    BOOL            reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    CHAR            reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    STRING          reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)
    ID              reduce using rule 8 (ciclo_vars -> ciclo_vars acceso vars .)


state 32

    (13) var_op -> tipo . ciclo_tipo
    (15) ciclo_tipo -> . ID arreglo asignacion_exp
    (16) ciclo_tipo -> . ciclo_id COMA ID arreglo asignacion_exp
    (17) ciclo_id -> . ID arreglo asignacion_obj
    (18) ciclo_id -> . ciclo_id COMA ID arreglo asignacion_obj

    ID              shift and go to state 45

    ciclo_id                       shift and go to state 43
    ciclo_tipo                     shift and go to state 44

state 33

    (27) tipo -> BOOL .

    ID              reduce using rule 27 (tipo -> BOOL .)


state 34

    (12) vars -> var_op . PYC

    PYC             shift and go to state 46


state 35

    (14) var_op -> ID . ciclo_id
    (17) ciclo_id -> . ID arreglo asignacion_obj
    (18) ciclo_id -> . ciclo_id COMA ID arreglo asignacion_obj

    ID              shift and go to state 48

    ciclo_id                       shift and go to state 47

state 36

    (29) tipo -> STRING .

    ID              reduce using rule 29 (tipo -> STRING .)


state 37

    (4) clase -> CLASS ID herencia LLIZQ ciclo_vars ciclo_func . LLDER
    (10) ciclo_func -> ciclo_func . func
    (33) func -> . acceso retorno ID params cuerpo_func
    (30) acceso -> . empty
    (31) acceso -> . HIDDEN
    (32) acceso -> . VISIBLE
    (123) empty -> .

    LLDER           shift and go to state 49
    HIDDEN          shift and go to state 20
    VISIBLE         shift and go to state 19
    WITHOUT         reduce using rule 123 (empty -> .)
    NUMERAL         reduce using rule 123 (empty -> .)
    REAL            reduce using rule 123 (empty -> .)
    BOOL            reduce using rule 123 (empty -> .)
    CHAR            reduce using rule 123 (empty -> .)
    STRING          reduce using rule 123 (empty -> .)

    acceso                         shift and go to state 23
    func                           shift and go to state 25
    empty                          shift and go to state 27

state 38

    (34) retorno -> tipo .

    ID              reduce using rule 34 (retorno -> tipo .)


state 39

    (35) retorno -> WITHOUT .

    ID              reduce using rule 35 (retorno -> WITHOUT .)


state 40

    (33) func -> acceso retorno . ID params cuerpo_func

    ID              shift and go to state 50


state 41

    (36) main -> VISIBLE WITHOUT . MAIN PIZQ PDER cuerpo_func

    MAIN            shift and go to state 51


state 42

    (11) clase_main -> CLASS MAIN LLIZQ ciclo_vars ciclo_func main LLDER .

    $end            reduce using rule 11 (clase_main -> CLASS MAIN LLIZQ ciclo_vars ciclo_func main LLDER .)


state 43

    (16) ciclo_tipo -> ciclo_id . COMA ID arreglo asignacion_exp
    (18) ciclo_id -> ciclo_id . COMA ID arreglo asignacion_obj

    COMA            shift and go to state 52


state 44

    (13) var_op -> tipo ciclo_tipo .

    PYC             reduce using rule 13 (var_op -> tipo ciclo_tipo .)


state 45

    (15) ciclo_tipo -> ID . arreglo asignacion_exp
    (17) ciclo_id -> ID . arreglo asignacion_obj
    (19) arreglo -> . empty
    (20) arreglo -> . CODER exp_arit COIZQ
    (123) empty -> .

    CODER           shift and go to state 53
    IGUAL           reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    arreglo                        shift and go to state 54
    empty                          shift and go to state 55

state 46

    (12) vars -> var_op PYC .

    LLDER           reduce using rule 12 (vars -> var_op PYC .)
    WHILE           reduce using rule 12 (vars -> var_op PYC .)
    FOR             reduce using rule 12 (vars -> var_op PYC .)
    OUTPUT          reduce using rule 12 (vars -> var_op PYC .)
    INPUT           reduce using rule 12 (vars -> var_op PYC .)
    RETURN          reduce using rule 12 (vars -> var_op PYC .)
    ID              reduce using rule 12 (vars -> var_op PYC .)
    THIS            reduce using rule 12 (vars -> var_op PYC .)
    IF              reduce using rule 12 (vars -> var_op PYC .)
    HIDDEN          reduce using rule 12 (vars -> var_op PYC .)
    VISIBLE         reduce using rule 12 (vars -> var_op PYC .)
    WITHOUT         reduce using rule 12 (vars -> var_op PYC .)
    NUMERAL         reduce using rule 12 (vars -> var_op PYC .)
    REAL            reduce using rule 12 (vars -> var_op PYC .)
    BOOL            reduce using rule 12 (vars -> var_op PYC .)
    CHAR            reduce using rule 12 (vars -> var_op PYC .)
    STRING          reduce using rule 12 (vars -> var_op PYC .)


state 47

    (14) var_op -> ID ciclo_id .
    (18) ciclo_id -> ciclo_id . COMA ID arreglo asignacion_obj

    PYC             reduce using rule 14 (var_op -> ID ciclo_id .)
    COMA            shift and go to state 56


state 48

    (17) ciclo_id -> ID . arreglo asignacion_obj
    (19) arreglo -> . empty
    (20) arreglo -> . CODER exp_arit COIZQ
    (123) empty -> .

    CODER           shift and go to state 53
    IGUAL           reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)

    arreglo                        shift and go to state 57
    empty                          shift and go to state 55

state 49

    (4) clase -> CLASS ID herencia LLIZQ ciclo_vars ciclo_func LLDER .

    CLASS           reduce using rule 4 (clase -> CLASS ID herencia LLIZQ ciclo_vars ciclo_func LLDER .)


state 50

    (33) func -> acceso retorno ID . params cuerpo_func
    (37) params -> . PIZQ params_op PDER

    PIZQ            shift and go to state 58

    params                         shift and go to state 59

state 51

    (36) main -> VISIBLE WITHOUT MAIN . PIZQ PDER cuerpo_func

    PIZQ            shift and go to state 60


state 52

    (16) ciclo_tipo -> ciclo_id COMA . ID arreglo asignacion_exp
    (18) ciclo_id -> ciclo_id COMA . ID arreglo asignacion_obj

    ID              shift and go to state 61


state 53

    (20) arreglo -> CODER . exp_arit COIZQ
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    exp_arit                       shift and go to state 64
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 54

    (15) ciclo_tipo -> ID arreglo . asignacion_exp
    (17) ciclo_id -> ID arreglo . asignacion_obj
    (21) asignacion_exp -> . empty
    (22) asignacion_exp -> . IGUAL exp
    (23) asignacion_obj -> . empty
    (24) asignacion_obj -> . IGUAL exp_objeto
    (123) empty -> .

    IGUAL           shift and go to state 71
    PYC             reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    asignacion_obj                 shift and go to state 70
    asignacion_exp                 shift and go to state 72
    empty                          shift and go to state 73

state 55

    (19) arreglo -> empty .

    IGUAL           reduce using rule 19 (arreglo -> empty .)
    COMA            reduce using rule 19 (arreglo -> empty .)
    PYC             reduce using rule 19 (arreglo -> empty .)
    POR             reduce using rule 19 (arreglo -> empty .)
    ENTRE           reduce using rule 19 (arreglo -> empty .)
    MOD             reduce using rule 19 (arreglo -> empty .)
    COIZQ           reduce using rule 19 (arreglo -> empty .)
    MAS             reduce using rule 19 (arreglo -> empty .)
    MENOS           reduce using rule 19 (arreglo -> empty .)
    PDER            reduce using rule 19 (arreglo -> empty .)
    MAYOR           reduce using rule 19 (arreglo -> empty .)
    MENOR           reduce using rule 19 (arreglo -> empty .)
    IGUALC          reduce using rule 19 (arreglo -> empty .)
    NOTIGUAL        reduce using rule 19 (arreglo -> empty .)
    MENORIGUAL      reduce using rule 19 (arreglo -> empty .)
    MAYORIGUAL      reduce using rule 19 (arreglo -> empty .)
    AND             reduce using rule 19 (arreglo -> empty .)
    OR              reduce using rule 19 (arreglo -> empty .)
    PUNTO           reduce using rule 19 (arreglo -> empty .)


state 56

    (18) ciclo_id -> ciclo_id COMA . ID arreglo asignacion_obj

    ID              shift and go to state 74


state 57

    (17) ciclo_id -> ID arreglo . asignacion_obj
    (23) asignacion_obj -> . empty
    (24) asignacion_obj -> . IGUAL exp_objeto
    (123) empty -> .

    IGUAL           shift and go to state 75
    COMA            reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)

    asignacion_obj                 shift and go to state 70
    empty                          shift and go to state 76

state 58

    (37) params -> PIZQ . params_op PDER
    (38) params_op -> . empty
    (39) params_op -> . params_ciclo
    (123) empty -> .
    (40) params_ciclo -> . tipo ID
    (41) params_ciclo -> . params_ciclo COMA tipo ID
    (25) tipo -> . NUMERAL
    (26) tipo -> . REAL
    (27) tipo -> . BOOL
    (28) tipo -> . CHAR
    (29) tipo -> . STRING

    PDER            reduce using rule 123 (empty -> .)
    NUMERAL         shift and go to state 30
    REAL            shift and go to state 28
    BOOL            shift and go to state 33
    CHAR            shift and go to state 29
    STRING          shift and go to state 36

    tipo                           shift and go to state 78
    params_op                      shift and go to state 77
    empty                          shift and go to state 80
    params_ciclo                   shift and go to state 79

state 59

    (33) func -> acceso retorno ID params . cuerpo_func
    (42) cuerpo_func -> . LLIZQ vars ciclo_estatuto LLDER

    LLIZQ           shift and go to state 81

    cuerpo_func                    shift and go to state 82

state 60

    (36) main -> VISIBLE WITHOUT MAIN PIZQ . PDER cuerpo_func

    PDER            shift and go to state 83


state 61

    (16) ciclo_tipo -> ciclo_id COMA ID . arreglo asignacion_exp
    (18) ciclo_id -> ciclo_id COMA ID . arreglo asignacion_obj
    (19) arreglo -> . empty
    (20) arreglo -> . CODER exp_arit COIZQ
    (123) empty -> .

    CODER           shift and go to state 53
    IGUAL           reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    arreglo                        shift and go to state 84
    empty                          shift and go to state 55

state 62

    (103) factor_oper_op -> MAS .

    CTE_NUMERAL     reduce using rule 103 (factor_oper_op -> MAS .)
    CTE_REAL        reduce using rule 103 (factor_oper_op -> MAS .)
    ID              reduce using rule 103 (factor_oper_op -> MAS .)
    THIS            reduce using rule 103 (factor_oper_op -> MAS .)


state 63

    (99) factor -> PIZQ . exp_arit PDER
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    exp_arit                       shift and go to state 85
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 64

    (20) arreglo -> CODER exp_arit . COIZQ
    (93) exp_arit -> exp_arit . MAS termino
    (94) exp_arit -> exp_arit . MENOS termino

    COIZQ           shift and go to state 88
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 65

    (102) factor_oper_op -> MENOS .

    CTE_NUMERAL     reduce using rule 102 (factor_oper_op -> MENOS .)
    CTE_REAL        reduce using rule 102 (factor_oper_op -> MENOS .)
    ID              reduce using rule 102 (factor_oper_op -> MENOS .)
    THIS            reduce using rule 102 (factor_oper_op -> MENOS .)


state 66

    (92) exp_arit -> termino .
    (96) termino -> termino . POR factor
    (97) termino -> termino . ENTRE factor
    (98) termino -> termino . MOD factor

    PDER            reduce using rule 92 (exp_arit -> termino .)
    MAS             reduce using rule 92 (exp_arit -> termino .)
    MENOS           reduce using rule 92 (exp_arit -> termino .)
    COMA            reduce using rule 92 (exp_arit -> termino .)
    PYC             reduce using rule 92 (exp_arit -> termino .)
    AND             reduce using rule 92 (exp_arit -> termino .)
    OR              reduce using rule 92 (exp_arit -> termino .)
    MAYOR           reduce using rule 92 (exp_arit -> termino .)
    MENOR           reduce using rule 92 (exp_arit -> termino .)
    IGUALC          reduce using rule 92 (exp_arit -> termino .)
    NOTIGUAL        reduce using rule 92 (exp_arit -> termino .)
    MENORIGUAL      reduce using rule 92 (exp_arit -> termino .)
    MAYORIGUAL      reduce using rule 92 (exp_arit -> termino .)
    COIZQ           reduce using rule 92 (exp_arit -> termino .)
    POR             shift and go to state 90
    ENTRE           shift and go to state 91
    MOD             shift and go to state 89


state 67

    (95) termino -> factor .

    POR             reduce using rule 95 (termino -> factor .)
    ENTRE           reduce using rule 95 (termino -> factor .)
    MOD             reduce using rule 95 (termino -> factor .)
    MAS             reduce using rule 95 (termino -> factor .)
    MENOS           reduce using rule 95 (termino -> factor .)
    PDER            reduce using rule 95 (termino -> factor .)
    COMA            reduce using rule 95 (termino -> factor .)
    COIZQ           reduce using rule 95 (termino -> factor .)
    PYC             reduce using rule 95 (termino -> factor .)
    MAYOR           reduce using rule 95 (termino -> factor .)
    MENOR           reduce using rule 95 (termino -> factor .)
    IGUALC          reduce using rule 95 (termino -> factor .)
    NOTIGUAL        reduce using rule 95 (termino -> factor .)
    MENORIGUAL      reduce using rule 95 (termino -> factor .)
    MAYORIGUAL      reduce using rule 95 (termino -> factor .)
    AND             reduce using rule 95 (termino -> factor .)
    OR              reduce using rule 95 (termino -> factor .)


state 68

    (100) factor -> factor_oper_op . factor_cte_op
    (104) factor_cte_op -> . CTE_NUMERAL
    (105) factor_cte_op -> . CTE_REAL
    (106) factor_cte_op -> . atom
    (107) factor_cte_op -> . llamada_func
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_NUMERAL     shift and go to state 100
    CTE_REAL        shift and go to state 96
    ID              shift and go to state 99
    THIS            shift and go to state 93

  ! ID              [ reduce using rule 123 (empty -> .) ]

    factor_cte_op                  shift and go to state 92
    caller                         shift and go to state 94
    atom                           shift and go to state 97
    llamada_func                   shift and go to state 98
    empty                          shift and go to state 95

state 69

    (101) factor_oper_op -> empty .

    CTE_NUMERAL     reduce using rule 101 (factor_oper_op -> empty .)
    CTE_REAL        reduce using rule 101 (factor_oper_op -> empty .)
    ID              reduce using rule 101 (factor_oper_op -> empty .)
    THIS            reduce using rule 101 (factor_oper_op -> empty .)


state 70

    (17) ciclo_id -> ID arreglo asignacion_obj .

    COMA            reduce using rule 17 (ciclo_id -> ID arreglo asignacion_obj .)
    PYC             reduce using rule 17 (ciclo_id -> ID arreglo asignacion_obj .)


state 71

    (22) asignacion_exp -> IGUAL . exp
    (24) asignacion_obj -> IGUAL . exp_objeto
    (63) exp -> . exp_bool
    (64) exp -> . exp_arit
    (65) exp -> . exp_str
    (66) exp -> . exp_objeto
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    NEW             shift and go to state 102
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    ID              shift and go to state 99
    THIS            shift and go to state 93
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    exp_objeto                     shift and go to state 111
    termino_bool                   shift and go to state 114
    exp_str                        shift and go to state 105
    factor_oper_op                 shift and go to state 68
    exp_arit                       shift and go to state 112
    empty                          shift and go to state 107
    termino                        shift and go to state 66
    exp                            shift and go to state 113
    atom                           shift and go to state 109
    exp_bool                       shift and go to state 115
    factor                         shift and go to state 67
    llamada_func                   shift and go to state 110

state 72

    (15) ciclo_tipo -> ID arreglo asignacion_exp .

    PYC             reduce using rule 15 (ciclo_tipo -> ID arreglo asignacion_exp .)


state 73

    (21) asignacion_exp -> empty .
    (23) asignacion_obj -> empty .

    PYC             reduce using rule 21 (asignacion_exp -> empty .)
    COMA            reduce using rule 23 (asignacion_obj -> empty .)


state 74

    (18) ciclo_id -> ciclo_id COMA ID . arreglo asignacion_obj
    (19) arreglo -> . empty
    (20) arreglo -> . CODER exp_arit COIZQ
    (123) empty -> .

    CODER           shift and go to state 53
    IGUAL           reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)

    arreglo                        shift and go to state 116
    empty                          shift and go to state 55

state 75

    (24) asignacion_obj -> IGUAL . exp_objeto
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr

    NEW             shift and go to state 102
    ID              shift and go to state 120
    THIS            shift and go to state 117

    exp_objeto                     shift and go to state 118
    atom                           shift and go to state 119

state 76

    (23) asignacion_obj -> empty .

    COMA            reduce using rule 23 (asignacion_obj -> empty .)
    PYC             reduce using rule 23 (asignacion_obj -> empty .)


state 77

    (37) params -> PIZQ params_op . PDER

    PDER            shift and go to state 121


state 78

    (40) params_ciclo -> tipo . ID

    ID              shift and go to state 122


state 79

    (39) params_op -> params_ciclo .
    (41) params_ciclo -> params_ciclo . COMA tipo ID

    PDER            reduce using rule 39 (params_op -> params_ciclo .)
    COMA            shift and go to state 123


state 80

    (38) params_op -> empty .

    PDER            reduce using rule 38 (params_op -> empty .)


state 81

    (42) cuerpo_func -> LLIZQ . vars ciclo_estatuto LLDER
    (12) vars -> . var_op PYC
    (13) var_op -> . tipo ciclo_tipo
    (14) var_op -> . ID ciclo_id
    (25) tipo -> . NUMERAL
    (26) tipo -> . REAL
    (27) tipo -> . BOOL
    (28) tipo -> . CHAR
    (29) tipo -> . STRING

    ID              shift and go to state 35
    NUMERAL         shift and go to state 30
    REAL            shift and go to state 28
    BOOL            shift and go to state 33
    CHAR            shift and go to state 29
    STRING          shift and go to state 36

    vars                           shift and go to state 124
    tipo                           shift and go to state 32
    var_op                         shift and go to state 34

state 82

    (33) func -> acceso retorno ID params cuerpo_func .

    VISIBLE         reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    HIDDEN          reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    WITHOUT         reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    NUMERAL         reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    REAL            reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    BOOL            reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    CHAR            reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    STRING          reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)
    LLDER           reduce using rule 33 (func -> acceso retorno ID params cuerpo_func .)


state 83

    (36) main -> VISIBLE WITHOUT MAIN PIZQ PDER . cuerpo_func
    (42) cuerpo_func -> . LLIZQ vars ciclo_estatuto LLDER

    LLIZQ           shift and go to state 81

    cuerpo_func                    shift and go to state 125

state 84

    (16) ciclo_tipo -> ciclo_id COMA ID arreglo . asignacion_exp
    (18) ciclo_id -> ciclo_id COMA ID arreglo . asignacion_obj
    (21) asignacion_exp -> . empty
    (22) asignacion_exp -> . IGUAL exp
    (23) asignacion_obj -> . empty
    (24) asignacion_obj -> . IGUAL exp_objeto
    (123) empty -> .

    IGUAL           shift and go to state 71
    PYC             reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)

    asignacion_obj                 shift and go to state 126
    asignacion_exp                 shift and go to state 127
    empty                          shift and go to state 73

state 85

    (99) factor -> PIZQ exp_arit . PDER
    (93) exp_arit -> exp_arit . MAS termino
    (94) exp_arit -> exp_arit . MENOS termino

    PDER            shift and go to state 128
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 86

    (93) exp_arit -> exp_arit MAS . termino
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    termino                        shift and go to state 129
    factor                         shift and go to state 67
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 87

    (94) exp_arit -> exp_arit MENOS . termino
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    termino                        shift and go to state 130
    factor                         shift and go to state 67
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 88

    (20) arreglo -> CODER exp_arit COIZQ .

    IGUAL           reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    COMA            reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    PYC             reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    POR             reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    ENTRE           reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    MOD             reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    COIZQ           reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    MAS             reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    MENOS           reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    PDER            reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    MAYOR           reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    MENOR           reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    IGUALC          reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    NOTIGUAL        reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    MENORIGUAL      reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    MAYORIGUAL      reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    AND             reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    OR              reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)
    PUNTO           reduce using rule 20 (arreglo -> CODER exp_arit COIZQ .)


state 89

    (98) termino -> termino MOD . factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    factor                         shift and go to state 131
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 90

    (96) termino -> termino POR . factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    factor                         shift and go to state 132
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 91

    (97) termino -> termino ENTRE . factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    factor                         shift and go to state 133
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 92

    (100) factor -> factor_oper_op factor_cte_op .

    POR             reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    ENTRE           reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    MOD             reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    MAS             reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    MENOS           reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    PYC             reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    COIZQ           reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    PDER            reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    MAYOR           reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    MENOR           reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    IGUALC          reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    NOTIGUAL        reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    MENORIGUAL      reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    MAYORIGUAL      reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    COMA            reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    AND             reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)
    OR              reduce using rule 100 (factor -> factor_oper_op factor_cte_op .)


state 93

    (116) atom -> THIS . atributo_arr
    (55) caller -> THIS . PUNTO
    (117) atributo_arr -> . PUNTO ID arreglo

    PUNTO           shift and go to state 135

    atributo_arr                   shift and go to state 134

state 94

    (53) llamada_func -> caller . ID PIZQ exp_op PDER PYC

    ID              shift and go to state 136


state 95

    (54) caller -> empty .

    ID              reduce using rule 54 (caller -> empty .)


state 96

    (105) factor_cte_op -> CTE_REAL .

    POR             reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    ENTRE           reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    MOD             reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    COIZQ           reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    MAS             reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    MENOS           reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    PDER            reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    PYC             reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    MAYOR           reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    MENOR           reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    IGUALC          reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    NOTIGUAL        reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    MENORIGUAL      reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    MAYORIGUAL      reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    COMA            reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    AND             reduce using rule 105 (factor_cte_op -> CTE_REAL .)
    OR              reduce using rule 105 (factor_cte_op -> CTE_REAL .)


state 97

    (106) factor_cte_op -> atom .

    POR             reduce using rule 106 (factor_cte_op -> atom .)
    ENTRE           reduce using rule 106 (factor_cte_op -> atom .)
    MOD             reduce using rule 106 (factor_cte_op -> atom .)
    COIZQ           reduce using rule 106 (factor_cte_op -> atom .)
    MAS             reduce using rule 106 (factor_cte_op -> atom .)
    MENOS           reduce using rule 106 (factor_cte_op -> atom .)
    PDER            reduce using rule 106 (factor_cte_op -> atom .)
    PYC             reduce using rule 106 (factor_cte_op -> atom .)
    MAYOR           reduce using rule 106 (factor_cte_op -> atom .)
    MENOR           reduce using rule 106 (factor_cte_op -> atom .)
    IGUALC          reduce using rule 106 (factor_cte_op -> atom .)
    NOTIGUAL        reduce using rule 106 (factor_cte_op -> atom .)
    MENORIGUAL      reduce using rule 106 (factor_cte_op -> atom .)
    MAYORIGUAL      reduce using rule 106 (factor_cte_op -> atom .)
    COMA            reduce using rule 106 (factor_cte_op -> atom .)
    AND             reduce using rule 106 (factor_cte_op -> atom .)
    OR              reduce using rule 106 (factor_cte_op -> atom .)


state 98

    (107) factor_cte_op -> llamada_func .

    POR             reduce using rule 107 (factor_cte_op -> llamada_func .)
    ENTRE           reduce using rule 107 (factor_cte_op -> llamada_func .)
    MOD             reduce using rule 107 (factor_cte_op -> llamada_func .)
    COIZQ           reduce using rule 107 (factor_cte_op -> llamada_func .)
    MAS             reduce using rule 107 (factor_cte_op -> llamada_func .)
    MENOS           reduce using rule 107 (factor_cte_op -> llamada_func .)
    PDER            reduce using rule 107 (factor_cte_op -> llamada_func .)
    PYC             reduce using rule 107 (factor_cte_op -> llamada_func .)
    MAYOR           reduce using rule 107 (factor_cte_op -> llamada_func .)
    MENOR           reduce using rule 107 (factor_cte_op -> llamada_func .)
    IGUALC          reduce using rule 107 (factor_cte_op -> llamada_func .)
    NOTIGUAL        reduce using rule 107 (factor_cte_op -> llamada_func .)
    MENORIGUAL      reduce using rule 107 (factor_cte_op -> llamada_func .)
    MAYORIGUAL      reduce using rule 107 (factor_cte_op -> llamada_func .)
    COMA            reduce using rule 107 (factor_cte_op -> llamada_func .)
    AND             reduce using rule 107 (factor_cte_op -> llamada_func .)
    OR              reduce using rule 107 (factor_cte_op -> llamada_func .)


state 99

    (114) atom -> ID . arreglo atributo_arr
    (115) atom -> ID . arreglo
    (56) caller -> ID . arreglo PUNTO
    (19) arreglo -> . empty
    (20) arreglo -> . CODER exp_arit COIZQ
    (123) empty -> .

    CODER           shift and go to state 53
    PUNTO           reduce using rule 123 (empty -> .)
    POR             reduce using rule 123 (empty -> .)
    ENTRE           reduce using rule 123 (empty -> .)
    MOD             reduce using rule 123 (empty -> .)
    COIZQ           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    PDER            reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)
    MAYOR           reduce using rule 123 (empty -> .)
    MENOR           reduce using rule 123 (empty -> .)
    IGUALC          reduce using rule 123 (empty -> .)
    NOTIGUAL        reduce using rule 123 (empty -> .)
    MENORIGUAL      reduce using rule 123 (empty -> .)
    MAYORIGUAL      reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    IGUAL           reduce using rule 123 (empty -> .)

    arreglo                        shift and go to state 137
    empty                          shift and go to state 55

state 100

    (104) factor_cte_op -> CTE_NUMERAL .

    POR             reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    ENTRE           reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    MOD             reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    COIZQ           reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    MAS             reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    MENOS           reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    PDER            reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    PYC             reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    MAYOR           reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    MENOR           reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    IGUALC          reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    NOTIGUAL        reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    MENORIGUAL      reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    MAYORIGUAL      reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    COMA            reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    AND             reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)
    OR              reduce using rule 104 (factor_cte_op -> CTE_NUMERAL .)


state 101

    (77) negacion -> NOT .

    PIZQ            reduce using rule 77 (negacion -> NOT .)
    TRUE            reduce using rule 77 (negacion -> NOT .)
    FALSE           reduce using rule 77 (negacion -> NOT .)
    ID              reduce using rule 77 (negacion -> NOT .)
    THIS            reduce using rule 77 (negacion -> NOT .)
    CTE_STR         reduce using rule 77 (negacion -> NOT .)
    CTE_CHAR        reduce using rule 77 (negacion -> NOT .)
    NOT             reduce using rule 77 (negacion -> NOT .)
    MENOS           reduce using rule 77 (negacion -> NOT .)
    MAS             reduce using rule 77 (negacion -> NOT .)
    CTE_NUMERAL     reduce using rule 77 (negacion -> NOT .)
    CTE_REAL        reduce using rule 77 (negacion -> NOT .)


state 102

    (68) exp_objeto -> NEW . ID PIZQ PDER

    ID              shift and go to state 138


state 103

    (75) exp_b -> negacion . op_exp_b
    (78) op_exp_b -> . llamada_func
    (79) op_exp_b -> . cte_bool
    (80) op_exp_b -> . comparacion
    (81) op_exp_b -> . exp_bool
    (82) op_exp_b -> . atom
    (83) op_exp_b -> . PIZQ exp_bool PDER
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (61) cte_bool -> . TRUE
    (62) cte_bool -> . FALSE
    (84) comparacion -> . exp_arit op_comp exp_arit
    (85) comparacion -> . exp_str IGUALC exp_str
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (123) empty -> .
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    PIZQ            shift and go to state 139
    TRUE            shift and go to state 142
    FALSE           shift and go to state 146
    ID              shift and go to state 99
    THIS            shift and go to state 93
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! TRUE            [ reduce using rule 123 (empty -> .) ]
  ! FALSE           [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    exp_arit                       shift and go to state 147
    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    factor                         shift and go to state 67
    termino_bool                   shift and go to state 114
    caller                         shift and go to state 94
    cte_bool                       shift and go to state 140
    factor_oper_op                 shift and go to state 68
    exp_str                        shift and go to state 144
    op_exp_b                       shift and go to state 141
    termino                        shift and go to state 66
    atom                           shift and go to state 145
    exp_bool                       shift and go to state 148
    comparacion                    shift and go to state 149
    llamada_func                   shift and go to state 143
    empty                          shift and go to state 107

state 104

    (73) termino_bool -> exp_b .

    AND             reduce using rule 73 (termino_bool -> exp_b .)
    OR              reduce using rule 73 (termino_bool -> exp_b .)
    PYC             reduce using rule 73 (termino_bool -> exp_b .)
    PDER            reduce using rule 73 (termino_bool -> exp_b .)
    COMA            reduce using rule 73 (termino_bool -> exp_b .)


state 105

    (65) exp -> exp_str .

    PYC             reduce using rule 65 (exp -> exp_str .)
    COMA            reduce using rule 65 (exp -> exp_str .)
    PDER            reduce using rule 65 (exp -> exp_str .)


state 106

    (110) exp_str -> CTE_CHAR .

    PDER            reduce using rule 110 (exp_str -> CTE_CHAR .)
    IGUALC          reduce using rule 110 (exp_str -> CTE_CHAR .)
    PYC             reduce using rule 110 (exp_str -> CTE_CHAR .)
    COMA            reduce using rule 110 (exp_str -> CTE_CHAR .)
    AND             reduce using rule 110 (exp_str -> CTE_CHAR .)
    OR              reduce using rule 110 (exp_str -> CTE_CHAR .)


state 107

    (54) caller -> empty .
    (76) negacion -> empty .
    (101) factor_oper_op -> empty .

  ! reduce/reduce conflict for ID resolved using rule 54 (caller -> empty .)
  ! reduce/reduce conflict for CTE_NUMERAL resolved using rule 76 (negacion -> empty .)
  ! reduce/reduce conflict for CTE_REAL resolved using rule 76 (negacion -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 54 (caller -> empty .)
  ! reduce/reduce conflict for THIS resolved using rule 76 (negacion -> empty .)
    ID              reduce using rule 54 (caller -> empty .)
    PIZQ            reduce using rule 76 (negacion -> empty .)
    TRUE            reduce using rule 76 (negacion -> empty .)
    FALSE           reduce using rule 76 (negacion -> empty .)
    THIS            reduce using rule 76 (negacion -> empty .)
    CTE_STR         reduce using rule 76 (negacion -> empty .)
    CTE_CHAR        reduce using rule 76 (negacion -> empty .)
    NOT             reduce using rule 76 (negacion -> empty .)
    MENOS           reduce using rule 76 (negacion -> empty .)
    MAS             reduce using rule 76 (negacion -> empty .)
    CTE_NUMERAL     reduce using rule 76 (negacion -> empty .)
    CTE_REAL        reduce using rule 76 (negacion -> empty .)

  ! ID              [ reduce using rule 76 (negacion -> empty .) ]
  ! CTE_NUMERAL     [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! CTE_REAL        [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! ID              [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! THIS            [ reduce using rule 101 (factor_oper_op -> empty .) ]


state 108

    (109) exp_str -> CTE_STR .

    PDER            reduce using rule 109 (exp_str -> CTE_STR .)
    IGUALC          reduce using rule 109 (exp_str -> CTE_STR .)
    PYC             reduce using rule 109 (exp_str -> CTE_STR .)
    COMA            reduce using rule 109 (exp_str -> CTE_STR .)
    AND             reduce using rule 109 (exp_str -> CTE_STR .)
    OR              reduce using rule 109 (exp_str -> CTE_STR .)


state 109

    (67) exp_objeto -> atom .
    (111) exp_str -> atom .

  ! reduce/reduce conflict for PYC resolved using rule 67 (exp_objeto -> atom .)
    COMA            reduce using rule 67 (exp_objeto -> atom .)
    PYC             reduce using rule 67 (exp_objeto -> atom .)

  ! PYC             [ reduce using rule 111 (exp_str -> atom .) ]


state 110

    (112) exp_str -> llamada_func .

    PDER            reduce using rule 112 (exp_str -> llamada_func .)
    PYC             reduce using rule 112 (exp_str -> llamada_func .)
    COMA            reduce using rule 112 (exp_str -> llamada_func .)
    AND             reduce using rule 112 (exp_str -> llamada_func .)
    OR              reduce using rule 112 (exp_str -> llamada_func .)


state 111

    (24) asignacion_obj -> IGUAL exp_objeto .
    (66) exp -> exp_objeto .

    COMA            reduce using rule 24 (asignacion_obj -> IGUAL exp_objeto .)
    PYC             reduce using rule 66 (exp -> exp_objeto .)


state 112

    (64) exp -> exp_arit .
    (93) exp_arit -> exp_arit . MAS termino
    (94) exp_arit -> exp_arit . MENOS termino

    PYC             reduce using rule 64 (exp -> exp_arit .)
    COMA            reduce using rule 64 (exp -> exp_arit .)
    PDER            reduce using rule 64 (exp -> exp_arit .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 113

    (22) asignacion_exp -> IGUAL exp .

    PYC             reduce using rule 22 (asignacion_exp -> IGUAL exp .)


state 114

    (71) exp_bool -> termino_bool .
    (74) termino_bool -> termino_bool . AND exp_b

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 71 (exp_bool -> termino_bool .)
    COMA            reduce using rule 71 (exp_bool -> termino_bool .)
    PDER            reduce using rule 71 (exp_bool -> termino_bool .)
    PYC             reduce using rule 71 (exp_bool -> termino_bool .)
    AND             shift and go to state 150

  ! AND             [ reduce using rule 71 (exp_bool -> termino_bool .) ]


state 115

    (63) exp -> exp_bool .
    (72) exp_bool -> exp_bool . OR termino_bool

    PYC             reduce using rule 63 (exp -> exp_bool .)
    COMA            reduce using rule 63 (exp -> exp_bool .)
    PDER            reduce using rule 63 (exp -> exp_bool .)
    OR              shift and go to state 151


state 116

    (18) ciclo_id -> ciclo_id COMA ID arreglo . asignacion_obj
    (23) asignacion_obj -> . empty
    (24) asignacion_obj -> . IGUAL exp_objeto
    (123) empty -> .

    IGUAL           shift and go to state 75
    COMA            reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)

    asignacion_obj                 shift and go to state 126
    empty                          shift and go to state 76

state 117

    (116) atom -> THIS . atributo_arr
    (117) atributo_arr -> . PUNTO ID arreglo

    PUNTO           shift and go to state 152

    atributo_arr                   shift and go to state 134

state 118

    (24) asignacion_obj -> IGUAL exp_objeto .

    COMA            reduce using rule 24 (asignacion_obj -> IGUAL exp_objeto .)
    PYC             reduce using rule 24 (asignacion_obj -> IGUAL exp_objeto .)


state 119

    (67) exp_objeto -> atom .

    COMA            reduce using rule 67 (exp_objeto -> atom .)
    PYC             reduce using rule 67 (exp_objeto -> atom .)


state 120

    (114) atom -> ID . arreglo atributo_arr
    (115) atom -> ID . arreglo
    (19) arreglo -> . empty
    (20) arreglo -> . CODER exp_arit COIZQ
    (123) empty -> .

    CODER           shift and go to state 53
    PUNTO           reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)
    IGUAL           reduce using rule 123 (empty -> .)
    PDER            reduce using rule 123 (empty -> .)

    arreglo                        shift and go to state 153
    empty                          shift and go to state 55

state 121

    (37) params -> PIZQ params_op PDER .

    LLIZQ           reduce using rule 37 (params -> PIZQ params_op PDER .)


state 122

    (40) params_ciclo -> tipo ID .

    COMA            reduce using rule 40 (params_ciclo -> tipo ID .)
    PDER            reduce using rule 40 (params_ciclo -> tipo ID .)


state 123

    (41) params_ciclo -> params_ciclo COMA . tipo ID
    (25) tipo -> . NUMERAL
    (26) tipo -> . REAL
    (27) tipo -> . BOOL
    (28) tipo -> . CHAR
    (29) tipo -> . STRING

    NUMERAL         shift and go to state 30
    REAL            shift and go to state 28
    BOOL            shift and go to state 33
    CHAR            shift and go to state 29
    STRING          shift and go to state 36

    tipo                           shift and go to state 154

state 124

    (42) cuerpo_func -> LLIZQ vars . ciclo_estatuto LLDER
    (43) ciclo_estatuto -> . empty
    (44) ciclo_estatuto -> . ciclo_estatuto estatuto
    (123) empty -> .

    LLDER           reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    OUTPUT          reduce using rule 123 (empty -> .)
    INPUT           reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)

    ciclo_estatuto                 shift and go to state 155
    empty                          shift and go to state 156

state 125

    (36) main -> VISIBLE WITHOUT MAIN PIZQ PDER cuerpo_func .

    LLDER           reduce using rule 36 (main -> VISIBLE WITHOUT MAIN PIZQ PDER cuerpo_func .)


state 126

    (18) ciclo_id -> ciclo_id COMA ID arreglo asignacion_obj .

    COMA            reduce using rule 18 (ciclo_id -> ciclo_id COMA ID arreglo asignacion_obj .)
    PYC             reduce using rule 18 (ciclo_id -> ciclo_id COMA ID arreglo asignacion_obj .)


state 127

    (16) ciclo_tipo -> ciclo_id COMA ID arreglo asignacion_exp .

    PYC             reduce using rule 16 (ciclo_tipo -> ciclo_id COMA ID arreglo asignacion_exp .)


state 128

    (99) factor -> PIZQ exp_arit PDER .

    POR             reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    ENTRE           reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    MOD             reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    MAS             reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    MENOS           reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    PYC             reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    COIZQ           reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    PDER            reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    MAYOR           reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    MENOR           reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    IGUALC          reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    NOTIGUAL        reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    MENORIGUAL      reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    MAYORIGUAL      reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    COMA            reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    AND             reduce using rule 99 (factor -> PIZQ exp_arit PDER .)
    OR              reduce using rule 99 (factor -> PIZQ exp_arit PDER .)


state 129

    (93) exp_arit -> exp_arit MAS termino .
    (96) termino -> termino . POR factor
    (97) termino -> termino . ENTRE factor
    (98) termino -> termino . MOD factor

    PDER            reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    MAS             reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    MENOS           reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    COMA            reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    PYC             reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    AND             reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    OR              reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    MAYOR           reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    MENOR           reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    IGUALC          reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    NOTIGUAL        reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    MENORIGUAL      reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    MAYORIGUAL      reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    COIZQ           reduce using rule 93 (exp_arit -> exp_arit MAS termino .)
    POR             shift and go to state 90
    ENTRE           shift and go to state 91
    MOD             shift and go to state 89


state 130

    (94) exp_arit -> exp_arit MENOS termino .
    (96) termino -> termino . POR factor
    (97) termino -> termino . ENTRE factor
    (98) termino -> termino . MOD factor

    PDER            reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    MAS             reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    MENOS           reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    COMA            reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    PYC             reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    AND             reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    OR              reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    MAYOR           reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    MENOR           reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    IGUALC          reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    NOTIGUAL        reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    MENORIGUAL      reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    MAYORIGUAL      reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    COIZQ           reduce using rule 94 (exp_arit -> exp_arit MENOS termino .)
    POR             shift and go to state 90
    ENTRE           shift and go to state 91
    MOD             shift and go to state 89


state 131

    (98) termino -> termino MOD factor .

    POR             reduce using rule 98 (termino -> termino MOD factor .)
    ENTRE           reduce using rule 98 (termino -> termino MOD factor .)
    MOD             reduce using rule 98 (termino -> termino MOD factor .)
    MAS             reduce using rule 98 (termino -> termino MOD factor .)
    MENOS           reduce using rule 98 (termino -> termino MOD factor .)
    PDER            reduce using rule 98 (termino -> termino MOD factor .)
    COMA            reduce using rule 98 (termino -> termino MOD factor .)
    COIZQ           reduce using rule 98 (termino -> termino MOD factor .)
    PYC             reduce using rule 98 (termino -> termino MOD factor .)
    MAYOR           reduce using rule 98 (termino -> termino MOD factor .)
    MENOR           reduce using rule 98 (termino -> termino MOD factor .)
    IGUALC          reduce using rule 98 (termino -> termino MOD factor .)
    NOTIGUAL        reduce using rule 98 (termino -> termino MOD factor .)
    MENORIGUAL      reduce using rule 98 (termino -> termino MOD factor .)
    MAYORIGUAL      reduce using rule 98 (termino -> termino MOD factor .)
    AND             reduce using rule 98 (termino -> termino MOD factor .)
    OR              reduce using rule 98 (termino -> termino MOD factor .)


state 132

    (96) termino -> termino POR factor .

    POR             reduce using rule 96 (termino -> termino POR factor .)
    ENTRE           reduce using rule 96 (termino -> termino POR factor .)
    MOD             reduce using rule 96 (termino -> termino POR factor .)
    MAS             reduce using rule 96 (termino -> termino POR factor .)
    MENOS           reduce using rule 96 (termino -> termino POR factor .)
    PDER            reduce using rule 96 (termino -> termino POR factor .)
    COMA            reduce using rule 96 (termino -> termino POR factor .)
    COIZQ           reduce using rule 96 (termino -> termino POR factor .)
    PYC             reduce using rule 96 (termino -> termino POR factor .)
    MAYOR           reduce using rule 96 (termino -> termino POR factor .)
    MENOR           reduce using rule 96 (termino -> termino POR factor .)
    IGUALC          reduce using rule 96 (termino -> termino POR factor .)
    NOTIGUAL        reduce using rule 96 (termino -> termino POR factor .)
    MENORIGUAL      reduce using rule 96 (termino -> termino POR factor .)
    MAYORIGUAL      reduce using rule 96 (termino -> termino POR factor .)
    AND             reduce using rule 96 (termino -> termino POR factor .)
    OR              reduce using rule 96 (termino -> termino POR factor .)


state 133

    (97) termino -> termino ENTRE factor .

    POR             reduce using rule 97 (termino -> termino ENTRE factor .)
    ENTRE           reduce using rule 97 (termino -> termino ENTRE factor .)
    MOD             reduce using rule 97 (termino -> termino ENTRE factor .)
    MAS             reduce using rule 97 (termino -> termino ENTRE factor .)
    MENOS           reduce using rule 97 (termino -> termino ENTRE factor .)
    PDER            reduce using rule 97 (termino -> termino ENTRE factor .)
    COMA            reduce using rule 97 (termino -> termino ENTRE factor .)
    COIZQ           reduce using rule 97 (termino -> termino ENTRE factor .)
    PYC             reduce using rule 97 (termino -> termino ENTRE factor .)
    MAYOR           reduce using rule 97 (termino -> termino ENTRE factor .)
    MENOR           reduce using rule 97 (termino -> termino ENTRE factor .)
    IGUALC          reduce using rule 97 (termino -> termino ENTRE factor .)
    NOTIGUAL        reduce using rule 97 (termino -> termino ENTRE factor .)
    MENORIGUAL      reduce using rule 97 (termino -> termino ENTRE factor .)
    MAYORIGUAL      reduce using rule 97 (termino -> termino ENTRE factor .)
    AND             reduce using rule 97 (termino -> termino ENTRE factor .)
    OR              reduce using rule 97 (termino -> termino ENTRE factor .)


state 134

    (116) atom -> THIS atributo_arr .

    POR             reduce using rule 116 (atom -> THIS atributo_arr .)
    ENTRE           reduce using rule 116 (atom -> THIS atributo_arr .)
    MOD             reduce using rule 116 (atom -> THIS atributo_arr .)
    COIZQ           reduce using rule 116 (atom -> THIS atributo_arr .)
    MAS             reduce using rule 116 (atom -> THIS atributo_arr .)
    MENOS           reduce using rule 116 (atom -> THIS atributo_arr .)
    PDER            reduce using rule 116 (atom -> THIS atributo_arr .)
    PYC             reduce using rule 116 (atom -> THIS atributo_arr .)
    MAYOR           reduce using rule 116 (atom -> THIS atributo_arr .)
    MENOR           reduce using rule 116 (atom -> THIS atributo_arr .)
    IGUALC          reduce using rule 116 (atom -> THIS atributo_arr .)
    NOTIGUAL        reduce using rule 116 (atom -> THIS atributo_arr .)
    MENORIGUAL      reduce using rule 116 (atom -> THIS atributo_arr .)
    MAYORIGUAL      reduce using rule 116 (atom -> THIS atributo_arr .)
    COMA            reduce using rule 116 (atom -> THIS atributo_arr .)
    AND             reduce using rule 116 (atom -> THIS atributo_arr .)
    OR              reduce using rule 116 (atom -> THIS atributo_arr .)
    IGUAL           reduce using rule 116 (atom -> THIS atributo_arr .)


state 135

    (55) caller -> THIS PUNTO .
    (117) atributo_arr -> PUNTO . ID arreglo

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 157

  ! ID              [ reduce using rule 55 (caller -> THIS PUNTO .) ]


state 136

    (53) llamada_func -> caller ID . PIZQ exp_op PDER PYC

    PIZQ            shift and go to state 158


state 137

    (114) atom -> ID arreglo . atributo_arr
    (115) atom -> ID arreglo .
    (56) caller -> ID arreglo . PUNTO
    (117) atributo_arr -> . PUNTO ID arreglo

    POR             reduce using rule 115 (atom -> ID arreglo .)
    ENTRE           reduce using rule 115 (atom -> ID arreglo .)
    MOD             reduce using rule 115 (atom -> ID arreglo .)
    COIZQ           reduce using rule 115 (atom -> ID arreglo .)
    MAS             reduce using rule 115 (atom -> ID arreglo .)
    MENOS           reduce using rule 115 (atom -> ID arreglo .)
    PDER            reduce using rule 115 (atom -> ID arreglo .)
    PYC             reduce using rule 115 (atom -> ID arreglo .)
    MAYOR           reduce using rule 115 (atom -> ID arreglo .)
    MENOR           reduce using rule 115 (atom -> ID arreglo .)
    IGUALC          reduce using rule 115 (atom -> ID arreglo .)
    NOTIGUAL        reduce using rule 115 (atom -> ID arreglo .)
    MENORIGUAL      reduce using rule 115 (atom -> ID arreglo .)
    MAYORIGUAL      reduce using rule 115 (atom -> ID arreglo .)
    COMA            reduce using rule 115 (atom -> ID arreglo .)
    AND             reduce using rule 115 (atom -> ID arreglo .)
    OR              reduce using rule 115 (atom -> ID arreglo .)
    IGUAL           reduce using rule 115 (atom -> ID arreglo .)
    PUNTO           shift and go to state 160

    atributo_arr                   shift and go to state 159

state 138

    (68) exp_objeto -> NEW ID . PIZQ PDER

    PIZQ            shift and go to state 161


state 139

    (83) op_exp_b -> PIZQ . exp_bool PDER
    (99) factor -> PIZQ . exp_arit PDER
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    CTE_STR         reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    termino_bool                   shift and go to state 114
    factor_oper_op                 shift and go to state 68
    exp_arit                       shift and go to state 85
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    exp_bool                       shift and go to state 162
    empty                          shift and go to state 163

state 140

    (79) op_exp_b -> cte_bool .

    AND             reduce using rule 79 (op_exp_b -> cte_bool .)
    OR              reduce using rule 79 (op_exp_b -> cte_bool .)
    PYC             reduce using rule 79 (op_exp_b -> cte_bool .)
    PDER            reduce using rule 79 (op_exp_b -> cte_bool .)
    COMA            reduce using rule 79 (op_exp_b -> cte_bool .)


state 141

    (75) exp_b -> negacion op_exp_b .

    AND             reduce using rule 75 (exp_b -> negacion op_exp_b .)
    OR              reduce using rule 75 (exp_b -> negacion op_exp_b .)
    PYC             reduce using rule 75 (exp_b -> negacion op_exp_b .)
    PDER            reduce using rule 75 (exp_b -> negacion op_exp_b .)
    COMA            reduce using rule 75 (exp_b -> negacion op_exp_b .)


state 142

    (61) cte_bool -> TRUE .

    AND             reduce using rule 61 (cte_bool -> TRUE .)
    OR              reduce using rule 61 (cte_bool -> TRUE .)
    PYC             reduce using rule 61 (cte_bool -> TRUE .)
    PDER            reduce using rule 61 (cte_bool -> TRUE .)
    COMA            reduce using rule 61 (cte_bool -> TRUE .)


state 143

    (78) op_exp_b -> llamada_func .
    (112) exp_str -> llamada_func .

    AND             reduce using rule 78 (op_exp_b -> llamada_func .)
    OR              reduce using rule 78 (op_exp_b -> llamada_func .)
    PYC             reduce using rule 78 (op_exp_b -> llamada_func .)
    PDER            reduce using rule 78 (op_exp_b -> llamada_func .)
    COMA            reduce using rule 78 (op_exp_b -> llamada_func .)
    IGUALC          reduce using rule 112 (exp_str -> llamada_func .)


state 144

    (85) comparacion -> exp_str . IGUALC exp_str

    IGUALC          shift and go to state 164


state 145

    (82) op_exp_b -> atom .
    (111) exp_str -> atom .

    AND             reduce using rule 82 (op_exp_b -> atom .)
    OR              reduce using rule 82 (op_exp_b -> atom .)
    PYC             reduce using rule 82 (op_exp_b -> atom .)
    PDER            reduce using rule 82 (op_exp_b -> atom .)
    COMA            reduce using rule 82 (op_exp_b -> atom .)
    IGUALC          reduce using rule 111 (exp_str -> atom .)


state 146

    (62) cte_bool -> FALSE .

    AND             reduce using rule 62 (cte_bool -> FALSE .)
    OR              reduce using rule 62 (cte_bool -> FALSE .)
    PYC             reduce using rule 62 (cte_bool -> FALSE .)
    PDER            reduce using rule 62 (cte_bool -> FALSE .)
    COMA            reduce using rule 62 (cte_bool -> FALSE .)


state 147

    (84) comparacion -> exp_arit . op_comp exp_arit
    (93) exp_arit -> exp_arit . MAS termino
    (94) exp_arit -> exp_arit . MENOS termino
    (86) op_comp -> . MAYOR
    (87) op_comp -> . MENOR
    (88) op_comp -> . IGUALC
    (89) op_comp -> . NOTIGUAL
    (90) op_comp -> . MENORIGUAL
    (91) op_comp -> . MAYORIGUAL

    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    MAYOR           shift and go to state 170
    MENOR           shift and go to state 165
    IGUALC          shift and go to state 169
    NOTIGUAL        shift and go to state 171
    MENORIGUAL      shift and go to state 168
    MAYORIGUAL      shift and go to state 167

    op_comp                        shift and go to state 166

state 148

    (81) op_exp_b -> exp_bool .
    (72) exp_bool -> exp_bool . OR termino_bool

  ! shift/reduce conflict for OR resolved as shift
    AND             reduce using rule 81 (op_exp_b -> exp_bool .)
    PYC             reduce using rule 81 (op_exp_b -> exp_bool .)
    PDER            reduce using rule 81 (op_exp_b -> exp_bool .)
    COMA            reduce using rule 81 (op_exp_b -> exp_bool .)
    OR              shift and go to state 151

  ! OR              [ reduce using rule 81 (op_exp_b -> exp_bool .) ]


state 149

    (80) op_exp_b -> comparacion .

    AND             reduce using rule 80 (op_exp_b -> comparacion .)
    OR              reduce using rule 80 (op_exp_b -> comparacion .)
    PYC             reduce using rule 80 (op_exp_b -> comparacion .)
    PDER            reduce using rule 80 (op_exp_b -> comparacion .)
    COMA            reduce using rule 80 (op_exp_b -> comparacion .)


state 150

    (74) termino_bool -> termino_bool AND . exp_b
    (75) exp_b -> . negacion op_exp_b
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (123) empty -> .

  ! shift/reduce conflict for NOT resolved as shift
    NOT             shift and go to state 101
    PIZQ            reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    CTE_STR         reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! NOT             [ reduce using rule 123 (empty -> .) ]

    negacion                       shift and go to state 103
    empty                          shift and go to state 173
    exp_b                          shift and go to state 172

state 151

    (72) exp_bool -> exp_bool OR . termino_bool
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (75) exp_b -> . negacion op_exp_b
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (123) empty -> .

  ! shift/reduce conflict for NOT resolved as shift
    NOT             shift and go to state 101
    PIZQ            reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    CTE_STR         reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! NOT             [ reduce using rule 123 (empty -> .) ]

    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    termino_bool                   shift and go to state 174
    empty                          shift and go to state 173

state 152

    (117) atributo_arr -> PUNTO . ID arreglo

    ID              shift and go to state 157


state 153

    (114) atom -> ID arreglo . atributo_arr
    (115) atom -> ID arreglo .
    (117) atributo_arr -> . PUNTO ID arreglo

    PDER            reduce using rule 115 (atom -> ID arreglo .)
    IGUAL           reduce using rule 115 (atom -> ID arreglo .)
    COMA            reduce using rule 115 (atom -> ID arreglo .)
    PYC             reduce using rule 115 (atom -> ID arreglo .)
    PUNTO           shift and go to state 152

    atributo_arr                   shift and go to state 159

state 154

    (41) params_ciclo -> params_ciclo COMA tipo . ID

    ID              shift and go to state 175


state 155

    (42) cuerpo_func -> LLIZQ vars ciclo_estatuto . LLDER
    (44) ciclo_estatuto -> ciclo_estatuto . estatuto
    (45) estatuto -> . while
    (46) estatuto -> . for
    (47) estatuto -> . asignacion
    (48) estatuto -> . condicion
    (49) estatuto -> . escritura
    (50) estatuto -> . lectura
    (51) estatuto -> . llamada_func
    (52) estatuto -> . return
    (70) while -> . WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (108) for -> . FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (113) asignacion -> . atom IGUAL exp PYC
    (118) condicion -> . ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER
    (122) escritura -> . OUTPUT PIZQ exp PDER PYC
    (121) lectura -> . INPUT PIZQ atom PDER PYC
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (69) return -> . RETURN exp PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (119) ciclo_cond -> . IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> . ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LLDER           shift and go to state 184
    WHILE           shift and go to state 177
    FOR             shift and go to state 185
    OUTPUT          shift and go to state 192
    INPUT           shift and go to state 187
    RETURN          shift and go to state 176
    ID              shift and go to state 99
    THIS            shift and go to state 93
    IF              shift and go to state 188

  ! ID              [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    return                         shift and go to state 178
    asignacion                     shift and go to state 189
    estatuto                       shift and go to state 181
    ciclo_cond                     shift and go to state 190
    for                            shift and go to state 180
    while                          shift and go to state 191
    condicion                      shift and go to state 182
    empty                          shift and go to state 95
    atom                           shift and go to state 186
    llamada_func                   shift and go to state 179
    lectura                        shift and go to state 183
    escritura                      shift and go to state 193

state 156

    (43) ciclo_estatuto -> empty .

    LLDER           reduce using rule 43 (ciclo_estatuto -> empty .)
    WHILE           reduce using rule 43 (ciclo_estatuto -> empty .)
    FOR             reduce using rule 43 (ciclo_estatuto -> empty .)
    OUTPUT          reduce using rule 43 (ciclo_estatuto -> empty .)
    INPUT           reduce using rule 43 (ciclo_estatuto -> empty .)
    RETURN          reduce using rule 43 (ciclo_estatuto -> empty .)
    ID              reduce using rule 43 (ciclo_estatuto -> empty .)
    THIS            reduce using rule 43 (ciclo_estatuto -> empty .)
    IF              reduce using rule 43 (ciclo_estatuto -> empty .)


state 157

    (117) atributo_arr -> PUNTO ID . arreglo
    (19) arreglo -> . empty
    (20) arreglo -> . CODER exp_arit COIZQ
    (123) empty -> .

    CODER           shift and go to state 53
    POR             reduce using rule 123 (empty -> .)
    ENTRE           reduce using rule 123 (empty -> .)
    MOD             reduce using rule 123 (empty -> .)
    COIZQ           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    PDER            reduce using rule 123 (empty -> .)
    PYC             reduce using rule 123 (empty -> .)
    MAYOR           reduce using rule 123 (empty -> .)
    MENOR           reduce using rule 123 (empty -> .)
    IGUALC          reduce using rule 123 (empty -> .)
    NOTIGUAL        reduce using rule 123 (empty -> .)
    MENORIGUAL      reduce using rule 123 (empty -> .)
    MAYORIGUAL      reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    IGUAL           reduce using rule 123 (empty -> .)

    arreglo                        shift and go to state 194
    empty                          shift and go to state 55

state 158

    (53) llamada_func -> caller ID PIZQ . exp_op PDER PYC
    (57) exp_op -> . empty
    (58) exp_op -> . exp_ciclo
    (123) empty -> .
    (59) exp_ciclo -> . exp
    (60) exp_ciclo -> . exp_ciclo COMA exp
    (63) exp -> . exp_bool
    (64) exp -> . exp_arit
    (65) exp -> . exp_str
    (66) exp -> . exp_objeto
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS

  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    PDER            reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    NEW             shift and go to state 102
    ID              shift and go to state 99
    THIS            shift and go to state 93
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    atom                           shift and go to state 198
    llamada_func                   shift and go to state 110
    negacion                       shift and go to state 103
    termino_bool                   shift and go to state 114
    exp_b                          shift and go to state 104
    exp_ciclo                      shift and go to state 200
    caller                         shift and go to state 94
    exp_str                        shift and go to state 105
    factor_oper_op                 shift and go to state 68
    exp_arit                       shift and go to state 112
    termino                        shift and go to state 66
    exp                            shift and go to state 199
    exp_objeto                     shift and go to state 195
    exp_bool                       shift and go to state 115
    factor                         shift and go to state 67
    exp_op                         shift and go to state 196
    empty                          shift and go to state 197

state 159

    (114) atom -> ID arreglo atributo_arr .

    POR             reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    ENTRE           reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    MOD             reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    COIZQ           reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    MAS             reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    MENOS           reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    PDER            reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    PYC             reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    MAYOR           reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    MENOR           reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    IGUALC          reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    NOTIGUAL        reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    MENORIGUAL      reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    MAYORIGUAL      reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    COMA            reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    AND             reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    OR              reduce using rule 114 (atom -> ID arreglo atributo_arr .)
    IGUAL           reduce using rule 114 (atom -> ID arreglo atributo_arr .)


state 160

    (56) caller -> ID arreglo PUNTO .
    (117) atributo_arr -> PUNTO . ID arreglo

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 157

  ! ID              [ reduce using rule 56 (caller -> ID arreglo PUNTO .) ]


state 161

    (68) exp_objeto -> NEW ID PIZQ . PDER

    PDER            shift and go to state 201


state 162

    (83) op_exp_b -> PIZQ exp_bool . PDER
    (72) exp_bool -> exp_bool . OR termino_bool

    PDER            shift and go to state 202
    OR              shift and go to state 151


state 163

    (76) negacion -> empty .
    (101) factor_oper_op -> empty .

  ! reduce/reduce conflict for CTE_NUMERAL resolved using rule 76 (negacion -> empty .)
  ! reduce/reduce conflict for CTE_REAL resolved using rule 76 (negacion -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 76 (negacion -> empty .)
  ! reduce/reduce conflict for THIS resolved using rule 76 (negacion -> empty .)
    PIZQ            reduce using rule 76 (negacion -> empty .)
    TRUE            reduce using rule 76 (negacion -> empty .)
    FALSE           reduce using rule 76 (negacion -> empty .)
    ID              reduce using rule 76 (negacion -> empty .)
    THIS            reduce using rule 76 (negacion -> empty .)
    CTE_STR         reduce using rule 76 (negacion -> empty .)
    CTE_CHAR        reduce using rule 76 (negacion -> empty .)
    NOT             reduce using rule 76 (negacion -> empty .)
    MENOS           reduce using rule 76 (negacion -> empty .)
    MAS             reduce using rule 76 (negacion -> empty .)
    CTE_NUMERAL     reduce using rule 76 (negacion -> empty .)
    CTE_REAL        reduce using rule 76 (negacion -> empty .)

  ! CTE_NUMERAL     [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! CTE_REAL        [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! ID              [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! THIS            [ reduce using rule 101 (factor_oper_op -> empty .) ]


state 164

    (85) comparacion -> exp_str IGUALC . exp_str
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    ID              shift and go to state 99
    THIS            shift and go to state 93

  ! ID              [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    exp_str                        shift and go to state 203
    atom                           shift and go to state 204
    llamada_func                   shift and go to state 110
    empty                          shift and go to state 95

state 165

    (87) op_comp -> MENOR .

    PIZQ            reduce using rule 87 (op_comp -> MENOR .)
    MENOS           reduce using rule 87 (op_comp -> MENOR .)
    MAS             reduce using rule 87 (op_comp -> MENOR .)
    CTE_NUMERAL     reduce using rule 87 (op_comp -> MENOR .)
    CTE_REAL        reduce using rule 87 (op_comp -> MENOR .)
    ID              reduce using rule 87 (op_comp -> MENOR .)
    THIS            reduce using rule 87 (op_comp -> MENOR .)


state 166

    (84) comparacion -> exp_arit op_comp . exp_arit
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

    PIZQ            shift and go to state 63
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)

    exp_arit                       shift and go to state 205
    termino                        shift and go to state 66
    factor                         shift and go to state 67
    factor_oper_op                 shift and go to state 68
    empty                          shift and go to state 69

state 167

    (91) op_comp -> MAYORIGUAL .

    PIZQ            reduce using rule 91 (op_comp -> MAYORIGUAL .)
    MENOS           reduce using rule 91 (op_comp -> MAYORIGUAL .)
    MAS             reduce using rule 91 (op_comp -> MAYORIGUAL .)
    CTE_NUMERAL     reduce using rule 91 (op_comp -> MAYORIGUAL .)
    CTE_REAL        reduce using rule 91 (op_comp -> MAYORIGUAL .)
    ID              reduce using rule 91 (op_comp -> MAYORIGUAL .)
    THIS            reduce using rule 91 (op_comp -> MAYORIGUAL .)


state 168

    (90) op_comp -> MENORIGUAL .

    PIZQ            reduce using rule 90 (op_comp -> MENORIGUAL .)
    MENOS           reduce using rule 90 (op_comp -> MENORIGUAL .)
    MAS             reduce using rule 90 (op_comp -> MENORIGUAL .)
    CTE_NUMERAL     reduce using rule 90 (op_comp -> MENORIGUAL .)
    CTE_REAL        reduce using rule 90 (op_comp -> MENORIGUAL .)
    ID              reduce using rule 90 (op_comp -> MENORIGUAL .)
    THIS            reduce using rule 90 (op_comp -> MENORIGUAL .)


state 169

    (88) op_comp -> IGUALC .

    PIZQ            reduce using rule 88 (op_comp -> IGUALC .)
    MENOS           reduce using rule 88 (op_comp -> IGUALC .)
    MAS             reduce using rule 88 (op_comp -> IGUALC .)
    CTE_NUMERAL     reduce using rule 88 (op_comp -> IGUALC .)
    CTE_REAL        reduce using rule 88 (op_comp -> IGUALC .)
    ID              reduce using rule 88 (op_comp -> IGUALC .)
    THIS            reduce using rule 88 (op_comp -> IGUALC .)


state 170

    (86) op_comp -> MAYOR .

    PIZQ            reduce using rule 86 (op_comp -> MAYOR .)
    MENOS           reduce using rule 86 (op_comp -> MAYOR .)
    MAS             reduce using rule 86 (op_comp -> MAYOR .)
    CTE_NUMERAL     reduce using rule 86 (op_comp -> MAYOR .)
    CTE_REAL        reduce using rule 86 (op_comp -> MAYOR .)
    ID              reduce using rule 86 (op_comp -> MAYOR .)
    THIS            reduce using rule 86 (op_comp -> MAYOR .)


state 171

    (89) op_comp -> NOTIGUAL .

    PIZQ            reduce using rule 89 (op_comp -> NOTIGUAL .)
    MENOS           reduce using rule 89 (op_comp -> NOTIGUAL .)
    MAS             reduce using rule 89 (op_comp -> NOTIGUAL .)
    CTE_NUMERAL     reduce using rule 89 (op_comp -> NOTIGUAL .)
    CTE_REAL        reduce using rule 89 (op_comp -> NOTIGUAL .)
    ID              reduce using rule 89 (op_comp -> NOTIGUAL .)
    THIS            reduce using rule 89 (op_comp -> NOTIGUAL .)


state 172

    (74) termino_bool -> termino_bool AND exp_b .

    AND             reduce using rule 74 (termino_bool -> termino_bool AND exp_b .)
    OR              reduce using rule 74 (termino_bool -> termino_bool AND exp_b .)
    PYC             reduce using rule 74 (termino_bool -> termino_bool AND exp_b .)
    PDER            reduce using rule 74 (termino_bool -> termino_bool AND exp_b .)
    COMA            reduce using rule 74 (termino_bool -> termino_bool AND exp_b .)


state 173

    (76) negacion -> empty .

    PIZQ            reduce using rule 76 (negacion -> empty .)
    TRUE            reduce using rule 76 (negacion -> empty .)
    FALSE           reduce using rule 76 (negacion -> empty .)
    ID              reduce using rule 76 (negacion -> empty .)
    THIS            reduce using rule 76 (negacion -> empty .)
    CTE_STR         reduce using rule 76 (negacion -> empty .)
    CTE_CHAR        reduce using rule 76 (negacion -> empty .)
    NOT             reduce using rule 76 (negacion -> empty .)
    MENOS           reduce using rule 76 (negacion -> empty .)
    MAS             reduce using rule 76 (negacion -> empty .)
    CTE_NUMERAL     reduce using rule 76 (negacion -> empty .)
    CTE_REAL        reduce using rule 76 (negacion -> empty .)


state 174

    (72) exp_bool -> exp_bool OR termino_bool .
    (74) termino_bool -> termino_bool . AND exp_b

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 72 (exp_bool -> exp_bool OR termino_bool .)
    COMA            reduce using rule 72 (exp_bool -> exp_bool OR termino_bool .)
    PDER            reduce using rule 72 (exp_bool -> exp_bool OR termino_bool .)
    PYC             reduce using rule 72 (exp_bool -> exp_bool OR termino_bool .)
    AND             shift and go to state 150

  ! AND             [ reduce using rule 72 (exp_bool -> exp_bool OR termino_bool .) ]


state 175

    (41) params_ciclo -> params_ciclo COMA tipo ID .

    COMA            reduce using rule 41 (params_ciclo -> params_ciclo COMA tipo ID .)
    PDER            reduce using rule 41 (params_ciclo -> params_ciclo COMA tipo ID .)


state 176

    (69) return -> RETURN . exp PYC
    (63) exp -> . exp_bool
    (64) exp -> . exp_arit
    (65) exp -> . exp_str
    (66) exp -> . exp_objeto
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    NEW             shift and go to state 102
    ID              shift and go to state 99
    THIS            shift and go to state 93
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    exp_objeto                     shift and go to state 195
    atom                           shift and go to state 198
    exp_str                        shift and go to state 105
    factor_oper_op                 shift and go to state 68
    exp_arit                       shift and go to state 112
    empty                          shift and go to state 107
    termino                        shift and go to state 66
    exp                            shift and go to state 206
    termino_bool                   shift and go to state 114
    exp_bool                       shift and go to state 115
    factor                         shift and go to state 67
    llamada_func                   shift and go to state 110

state 177

    (70) while -> WHILE . PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER

    PIZQ            shift and go to state 207


state 178

    (52) estatuto -> return .

    LLDER           reduce using rule 52 (estatuto -> return .)
    WHILE           reduce using rule 52 (estatuto -> return .)
    FOR             reduce using rule 52 (estatuto -> return .)
    OUTPUT          reduce using rule 52 (estatuto -> return .)
    INPUT           reduce using rule 52 (estatuto -> return .)
    RETURN          reduce using rule 52 (estatuto -> return .)
    ID              reduce using rule 52 (estatuto -> return .)
    THIS            reduce using rule 52 (estatuto -> return .)
    IF              reduce using rule 52 (estatuto -> return .)


state 179

    (51) estatuto -> llamada_func .

    LLDER           reduce using rule 51 (estatuto -> llamada_func .)
    WHILE           reduce using rule 51 (estatuto -> llamada_func .)
    FOR             reduce using rule 51 (estatuto -> llamada_func .)
    OUTPUT          reduce using rule 51 (estatuto -> llamada_func .)
    INPUT           reduce using rule 51 (estatuto -> llamada_func .)
    RETURN          reduce using rule 51 (estatuto -> llamada_func .)
    ID              reduce using rule 51 (estatuto -> llamada_func .)
    THIS            reduce using rule 51 (estatuto -> llamada_func .)
    IF              reduce using rule 51 (estatuto -> llamada_func .)


state 180

    (46) estatuto -> for .

    LLDER           reduce using rule 46 (estatuto -> for .)
    WHILE           reduce using rule 46 (estatuto -> for .)
    FOR             reduce using rule 46 (estatuto -> for .)
    OUTPUT          reduce using rule 46 (estatuto -> for .)
    INPUT           reduce using rule 46 (estatuto -> for .)
    RETURN          reduce using rule 46 (estatuto -> for .)
    ID              reduce using rule 46 (estatuto -> for .)
    THIS            reduce using rule 46 (estatuto -> for .)
    IF              reduce using rule 46 (estatuto -> for .)


state 181

    (44) ciclo_estatuto -> ciclo_estatuto estatuto .

    LLDER           reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    WHILE           reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    FOR             reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    OUTPUT          reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    INPUT           reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    RETURN          reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    ID              reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    THIS            reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)
    IF              reduce using rule 44 (ciclo_estatuto -> ciclo_estatuto estatuto .)


state 182

    (48) estatuto -> condicion .

    LLDER           reduce using rule 48 (estatuto -> condicion .)
    WHILE           reduce using rule 48 (estatuto -> condicion .)
    FOR             reduce using rule 48 (estatuto -> condicion .)
    OUTPUT          reduce using rule 48 (estatuto -> condicion .)
    INPUT           reduce using rule 48 (estatuto -> condicion .)
    RETURN          reduce using rule 48 (estatuto -> condicion .)
    ID              reduce using rule 48 (estatuto -> condicion .)
    THIS            reduce using rule 48 (estatuto -> condicion .)
    IF              reduce using rule 48 (estatuto -> condicion .)


state 183

    (50) estatuto -> lectura .

    LLDER           reduce using rule 50 (estatuto -> lectura .)
    WHILE           reduce using rule 50 (estatuto -> lectura .)
    FOR             reduce using rule 50 (estatuto -> lectura .)
    OUTPUT          reduce using rule 50 (estatuto -> lectura .)
    INPUT           reduce using rule 50 (estatuto -> lectura .)
    RETURN          reduce using rule 50 (estatuto -> lectura .)
    ID              reduce using rule 50 (estatuto -> lectura .)
    THIS            reduce using rule 50 (estatuto -> lectura .)
    IF              reduce using rule 50 (estatuto -> lectura .)


state 184

    (42) cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .

    LLDER           reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    VISIBLE         reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    HIDDEN          reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    WITHOUT         reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    NUMERAL         reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    REAL            reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    BOOL            reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    CHAR            reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)
    STRING          reduce using rule 42 (cuerpo_func -> LLIZQ vars ciclo_estatuto LLDER .)


state 185

    (108) for -> FOR . PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER

    PIZQ            shift and go to state 208


state 186

    (113) asignacion -> atom . IGUAL exp PYC

    IGUAL           shift and go to state 209


state 187

    (121) lectura -> INPUT . PIZQ atom PDER PYC

    PIZQ            shift and go to state 210


state 188

    (119) ciclo_cond -> IF . PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER

    PIZQ            shift and go to state 211


state 189

    (47) estatuto -> asignacion .

    LLDER           reduce using rule 47 (estatuto -> asignacion .)
    WHILE           reduce using rule 47 (estatuto -> asignacion .)
    FOR             reduce using rule 47 (estatuto -> asignacion .)
    OUTPUT          reduce using rule 47 (estatuto -> asignacion .)
    INPUT           reduce using rule 47 (estatuto -> asignacion .)
    RETURN          reduce using rule 47 (estatuto -> asignacion .)
    ID              reduce using rule 47 (estatuto -> asignacion .)
    THIS            reduce using rule 47 (estatuto -> asignacion .)
    IF              reduce using rule 47 (estatuto -> asignacion .)


state 190

    (118) condicion -> ciclo_cond . ELSE LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> ciclo_cond . ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER

    ELSE            shift and go to state 212


state 191

    (45) estatuto -> while .

    LLDER           reduce using rule 45 (estatuto -> while .)
    WHILE           reduce using rule 45 (estatuto -> while .)
    FOR             reduce using rule 45 (estatuto -> while .)
    OUTPUT          reduce using rule 45 (estatuto -> while .)
    INPUT           reduce using rule 45 (estatuto -> while .)
    RETURN          reduce using rule 45 (estatuto -> while .)
    ID              reduce using rule 45 (estatuto -> while .)
    THIS            reduce using rule 45 (estatuto -> while .)
    IF              reduce using rule 45 (estatuto -> while .)


state 192

    (122) escritura -> OUTPUT . PIZQ exp PDER PYC

    PIZQ            shift and go to state 213


state 193

    (49) estatuto -> escritura .

    LLDER           reduce using rule 49 (estatuto -> escritura .)
    WHILE           reduce using rule 49 (estatuto -> escritura .)
    FOR             reduce using rule 49 (estatuto -> escritura .)
    OUTPUT          reduce using rule 49 (estatuto -> escritura .)
    INPUT           reduce using rule 49 (estatuto -> escritura .)
    RETURN          reduce using rule 49 (estatuto -> escritura .)
    ID              reduce using rule 49 (estatuto -> escritura .)
    THIS            reduce using rule 49 (estatuto -> escritura .)
    IF              reduce using rule 49 (estatuto -> escritura .)


state 194

    (117) atributo_arr -> PUNTO ID arreglo .

    COMA            reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    PYC             reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    IGUAL           reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    PDER            reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    POR             reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    ENTRE           reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    MOD             reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    COIZQ           reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    MAS             reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    MENOS           reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    MAYOR           reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    MENOR           reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    IGUALC          reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    NOTIGUAL        reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    MENORIGUAL      reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    MAYORIGUAL      reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    AND             reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)
    OR              reduce using rule 117 (atributo_arr -> PUNTO ID arreglo .)


state 195

    (66) exp -> exp_objeto .

    PYC             reduce using rule 66 (exp -> exp_objeto .)
    COMA            reduce using rule 66 (exp -> exp_objeto .)
    PDER            reduce using rule 66 (exp -> exp_objeto .)


state 196

    (53) llamada_func -> caller ID PIZQ exp_op . PDER PYC

    PDER            shift and go to state 214


state 197

    (57) exp_op -> empty .
    (54) caller -> empty .
    (76) negacion -> empty .
    (101) factor_oper_op -> empty .

  ! reduce/reduce conflict for ID resolved using rule 54 (caller -> empty .)
  ! reduce/reduce conflict for CTE_NUMERAL resolved using rule 76 (negacion -> empty .)
  ! reduce/reduce conflict for CTE_REAL resolved using rule 76 (negacion -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 54 (caller -> empty .)
  ! reduce/reduce conflict for THIS resolved using rule 76 (negacion -> empty .)
    PDER            reduce using rule 57 (exp_op -> empty .)
    ID              reduce using rule 54 (caller -> empty .)
    PIZQ            reduce using rule 76 (negacion -> empty .)
    TRUE            reduce using rule 76 (negacion -> empty .)
    FALSE           reduce using rule 76 (negacion -> empty .)
    THIS            reduce using rule 76 (negacion -> empty .)
    CTE_STR         reduce using rule 76 (negacion -> empty .)
    CTE_CHAR        reduce using rule 76 (negacion -> empty .)
    NOT             reduce using rule 76 (negacion -> empty .)
    MENOS           reduce using rule 76 (negacion -> empty .)
    MAS             reduce using rule 76 (negacion -> empty .)
    CTE_NUMERAL     reduce using rule 76 (negacion -> empty .)
    CTE_REAL        reduce using rule 76 (negacion -> empty .)

  ! ID              [ reduce using rule 76 (negacion -> empty .) ]
  ! CTE_NUMERAL     [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! CTE_REAL        [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! ID              [ reduce using rule 101 (factor_oper_op -> empty .) ]
  ! THIS            [ reduce using rule 101 (factor_oper_op -> empty .) ]


state 198

    (111) exp_str -> atom .
    (67) exp_objeto -> atom .

  ! reduce/reduce conflict for PYC resolved using rule 67 (exp_objeto -> atom .)
  ! reduce/reduce conflict for PDER resolved using rule 67 (exp_objeto -> atom .)
  ! reduce/reduce conflict for COMA resolved using rule 67 (exp_objeto -> atom .)
    PYC             reduce using rule 67 (exp_objeto -> atom .)
    PDER            reduce using rule 67 (exp_objeto -> atom .)
    COMA            reduce using rule 67 (exp_objeto -> atom .)

  ! PDER            [ reduce using rule 111 (exp_str -> atom .) ]
  ! PYC             [ reduce using rule 111 (exp_str -> atom .) ]
  ! COMA            [ reduce using rule 111 (exp_str -> atom .) ]


state 199

    (59) exp_ciclo -> exp .

    COMA            reduce using rule 59 (exp_ciclo -> exp .)
    PDER            reduce using rule 59 (exp_ciclo -> exp .)


state 200

    (58) exp_op -> exp_ciclo .
    (60) exp_ciclo -> exp_ciclo . COMA exp

    PDER            reduce using rule 58 (exp_op -> exp_ciclo .)
    COMA            shift and go to state 215


state 201

    (68) exp_objeto -> NEW ID PIZQ PDER .

    PYC             reduce using rule 68 (exp_objeto -> NEW ID PIZQ PDER .)
    COMA            reduce using rule 68 (exp_objeto -> NEW ID PIZQ PDER .)
    PDER            reduce using rule 68 (exp_objeto -> NEW ID PIZQ PDER .)


state 202

    (83) op_exp_b -> PIZQ exp_bool PDER .

    AND             reduce using rule 83 (op_exp_b -> PIZQ exp_bool PDER .)
    OR              reduce using rule 83 (op_exp_b -> PIZQ exp_bool PDER .)
    PYC             reduce using rule 83 (op_exp_b -> PIZQ exp_bool PDER .)
    PDER            reduce using rule 83 (op_exp_b -> PIZQ exp_bool PDER .)
    COMA            reduce using rule 83 (op_exp_b -> PIZQ exp_bool PDER .)


state 203

    (85) comparacion -> exp_str IGUALC exp_str .

    AND             reduce using rule 85 (comparacion -> exp_str IGUALC exp_str .)
    OR              reduce using rule 85 (comparacion -> exp_str IGUALC exp_str .)
    PYC             reduce using rule 85 (comparacion -> exp_str IGUALC exp_str .)
    PDER            reduce using rule 85 (comparacion -> exp_str IGUALC exp_str .)
    COMA            reduce using rule 85 (comparacion -> exp_str IGUALC exp_str .)


state 204

    (111) exp_str -> atom .

    AND             reduce using rule 111 (exp_str -> atom .)
    OR              reduce using rule 111 (exp_str -> atom .)
    PYC             reduce using rule 111 (exp_str -> atom .)
    PDER            reduce using rule 111 (exp_str -> atom .)
    COMA            reduce using rule 111 (exp_str -> atom .)


state 205

    (84) comparacion -> exp_arit op_comp exp_arit .
    (93) exp_arit -> exp_arit . MAS termino
    (94) exp_arit -> exp_arit . MENOS termino

    AND             reduce using rule 84 (comparacion -> exp_arit op_comp exp_arit .)
    OR              reduce using rule 84 (comparacion -> exp_arit op_comp exp_arit .)
    PYC             reduce using rule 84 (comparacion -> exp_arit op_comp exp_arit .)
    PDER            reduce using rule 84 (comparacion -> exp_arit op_comp exp_arit .)
    COMA            reduce using rule 84 (comparacion -> exp_arit op_comp exp_arit .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 206

    (69) return -> RETURN exp . PYC

    PYC             shift and go to state 216


state 207

    (70) while -> WHILE PIZQ . exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (75) exp_b -> . negacion op_exp_b
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (123) empty -> .

  ! shift/reduce conflict for NOT resolved as shift
    NOT             shift and go to state 101
    PIZQ            reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    CTE_STR         reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! NOT             [ reduce using rule 123 (empty -> .) ]

    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    termino_bool                   shift and go to state 114
    exp_bool                       shift and go to state 217
    empty                          shift and go to state 173

state 208

    (108) for -> FOR PIZQ . asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (113) asignacion -> . atom IGUAL exp PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr

    ID              shift and go to state 120
    THIS            shift and go to state 117

    asignacion                     shift and go to state 218
    atom                           shift and go to state 186

state 209

    (113) asignacion -> atom IGUAL . exp PYC
    (63) exp -> . exp_bool
    (64) exp -> . exp_arit
    (65) exp -> . exp_str
    (66) exp -> . exp_objeto
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    NEW             shift and go to state 102
    ID              shift and go to state 99
    THIS            shift and go to state 93
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    exp_objeto                     shift and go to state 195
    termino_bool                   shift and go to state 114
    exp_str                        shift and go to state 105
    factor_oper_op                 shift and go to state 68
    exp_arit                       shift and go to state 112
    empty                          shift and go to state 107
    termino                        shift and go to state 66
    exp                            shift and go to state 219
    atom                           shift and go to state 198
    exp_bool                       shift and go to state 115
    factor                         shift and go to state 67
    llamada_func                   shift and go to state 110

state 210

    (121) lectura -> INPUT PIZQ . atom PDER PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr

    ID              shift and go to state 120
    THIS            shift and go to state 117

    atom                           shift and go to state 220

state 211

    (119) ciclo_cond -> IF PIZQ . exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (75) exp_b -> . negacion op_exp_b
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (123) empty -> .

  ! shift/reduce conflict for NOT resolved as shift
    NOT             shift and go to state 101
    PIZQ            reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    CTE_STR         reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! NOT             [ reduce using rule 123 (empty -> .) ]

    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    termino_bool                   shift and go to state 114
    exp_bool                       shift and go to state 221
    empty                          shift and go to state 173

state 212

    (118) condicion -> ciclo_cond ELSE . LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> ciclo_cond ELSE . IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER

    LLIZQ           shift and go to state 222
    IF              shift and go to state 223


state 213

    (122) escritura -> OUTPUT PIZQ . exp PDER PYC
    (63) exp -> . exp_bool
    (64) exp -> . exp_arit
    (65) exp -> . exp_str
    (66) exp -> . exp_objeto
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    NEW             shift and go to state 102
    ID              shift and go to state 99
    THIS            shift and go to state 93
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    exp_objeto                     shift and go to state 195
    atom                           shift and go to state 198
    exp_str                        shift and go to state 105
    factor_oper_op                 shift and go to state 68
    exp_arit                       shift and go to state 112
    empty                          shift and go to state 107
    termino                        shift and go to state 66
    exp                            shift and go to state 224
    termino_bool                   shift and go to state 114
    exp_bool                       shift and go to state 115
    factor                         shift and go to state 67
    llamada_func                   shift and go to state 110

state 214

    (53) llamada_func -> caller ID PIZQ exp_op PDER . PYC

    PYC             shift and go to state 225


state 215

    (60) exp_ciclo -> exp_ciclo COMA . exp
    (63) exp -> . exp_bool
    (64) exp -> . exp_arit
    (65) exp -> . exp_str
    (66) exp -> . exp_objeto
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    NEW             shift and go to state 102
    ID              shift and go to state 99
    THIS            shift and go to state 93
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    atom                           shift and go to state 198
    caller                         shift and go to state 94
    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    termino_bool                   shift and go to state 114
    exp_str                        shift and go to state 105
    factor_oper_op                 shift and go to state 68
    exp_arit                       shift and go to state 112
    empty                          shift and go to state 107
    termino                        shift and go to state 66
    exp                            shift and go to state 226
    exp_objeto                     shift and go to state 195
    exp_bool                       shift and go to state 115
    factor                         shift and go to state 67
    llamada_func                   shift and go to state 110

state 216

    (69) return -> RETURN exp PYC .

    LLDER           reduce using rule 69 (return -> RETURN exp PYC .)
    WHILE           reduce using rule 69 (return -> RETURN exp PYC .)
    FOR             reduce using rule 69 (return -> RETURN exp PYC .)
    OUTPUT          reduce using rule 69 (return -> RETURN exp PYC .)
    INPUT           reduce using rule 69 (return -> RETURN exp PYC .)
    RETURN          reduce using rule 69 (return -> RETURN exp PYC .)
    ID              reduce using rule 69 (return -> RETURN exp PYC .)
    THIS            reduce using rule 69 (return -> RETURN exp PYC .)
    IF              reduce using rule 69 (return -> RETURN exp PYC .)


state 217

    (70) while -> WHILE PIZQ exp_bool . PDER LLIZQ ciclo_estatuto LLDER
    (72) exp_bool -> exp_bool . OR termino_bool

    PDER            shift and go to state 227
    OR              shift and go to state 151


state 218

    (108) for -> FOR PIZQ asignacion . exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (75) exp_b -> . negacion op_exp_b
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (123) empty -> .

  ! shift/reduce conflict for NOT resolved as shift
    NOT             shift and go to state 101
    PIZQ            reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    CTE_STR         reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! NOT             [ reduce using rule 123 (empty -> .) ]

    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    termino_bool                   shift and go to state 114
    exp_bool                       shift and go to state 228
    empty                          shift and go to state 173

state 219

    (113) asignacion -> atom IGUAL exp . PYC

    PYC             shift and go to state 229


state 220

    (121) lectura -> INPUT PIZQ atom . PDER PYC

    PDER            shift and go to state 230


state 221

    (119) ciclo_cond -> IF PIZQ exp_bool . PDER LLIZQ ciclo_estatuto LLDER
    (72) exp_bool -> exp_bool . OR termino_bool

    PDER            shift and go to state 231
    OR              shift and go to state 151


state 222

    (118) condicion -> ciclo_cond ELSE LLIZQ . ciclo_estatuto LLDER
    (43) ciclo_estatuto -> . empty
    (44) ciclo_estatuto -> . ciclo_estatuto estatuto
    (123) empty -> .

    LLDER           reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    OUTPUT          reduce using rule 123 (empty -> .)
    INPUT           reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)

    ciclo_estatuto                 shift and go to state 232
    empty                          shift and go to state 156

state 223

    (120) ciclo_cond -> ciclo_cond ELSE IF . PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER

    PIZQ            shift and go to state 233


state 224

    (122) escritura -> OUTPUT PIZQ exp . PDER PYC

    PDER            shift and go to state 234


state 225

    (53) llamada_func -> caller ID PIZQ exp_op PDER PYC .

    COMA            reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    PDER            reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    AND             reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    OR              reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    PYC             reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    LLDER           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    WHILE           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    FOR             reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    OUTPUT          reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    INPUT           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    RETURN          reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    ID              reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    THIS            reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    IF              reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    IGUALC          reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    POR             reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    ENTRE           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    MOD             reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    COIZQ           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    MAS             reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    MENOS           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    MAYOR           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    MENOR           reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    NOTIGUAL        reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    MENORIGUAL      reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)
    MAYORIGUAL      reduce using rule 53 (llamada_func -> caller ID PIZQ exp_op PDER PYC .)


state 226

    (60) exp_ciclo -> exp_ciclo COMA exp .

    COMA            reduce using rule 60 (exp_ciclo -> exp_ciclo COMA exp .)
    PDER            reduce using rule 60 (exp_ciclo -> exp_ciclo COMA exp .)


state 227

    (70) while -> WHILE PIZQ exp_bool PDER . LLIZQ ciclo_estatuto LLDER

    LLIZQ           shift and go to state 235


state 228

    (108) for -> FOR PIZQ asignacion exp_bool . PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (72) exp_bool -> exp_bool . OR termino_bool

    PYC             shift and go to state 236
    OR              shift and go to state 151


state 229

    (113) asignacion -> atom IGUAL exp PYC .

    LLDER           reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    WHILE           reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    FOR             reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    OUTPUT          reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    INPUT           reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    RETURN          reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    ID              reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    THIS            reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    IF              reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    NOT             reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    PIZQ            reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    TRUE            reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    FALSE           reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    CTE_STR         reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    CTE_CHAR        reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    MENOS           reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    MAS             reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    CTE_NUMERAL     reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)
    CTE_REAL        reduce using rule 113 (asignacion -> atom IGUAL exp PYC .)


state 230

    (121) lectura -> INPUT PIZQ atom PDER . PYC

    PYC             shift and go to state 237


state 231

    (119) ciclo_cond -> IF PIZQ exp_bool PDER . LLIZQ ciclo_estatuto LLDER

    LLIZQ           shift and go to state 238


state 232

    (118) condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto . LLDER
    (44) ciclo_estatuto -> ciclo_estatuto . estatuto
    (45) estatuto -> . while
    (46) estatuto -> . for
    (47) estatuto -> . asignacion
    (48) estatuto -> . condicion
    (49) estatuto -> . escritura
    (50) estatuto -> . lectura
    (51) estatuto -> . llamada_func
    (52) estatuto -> . return
    (70) while -> . WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (108) for -> . FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (113) asignacion -> . atom IGUAL exp PYC
    (118) condicion -> . ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER
    (122) escritura -> . OUTPUT PIZQ exp PDER PYC
    (121) lectura -> . INPUT PIZQ atom PDER PYC
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (69) return -> . RETURN exp PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (119) ciclo_cond -> . IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> . ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LLDER           shift and go to state 239
    WHILE           shift and go to state 177
    FOR             shift and go to state 185
    OUTPUT          shift and go to state 192
    INPUT           shift and go to state 187
    RETURN          shift and go to state 176
    ID              shift and go to state 99
    THIS            shift and go to state 93
    IF              shift and go to state 188

  ! ID              [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    return                         shift and go to state 178
    for                            shift and go to state 180
    asignacion                     shift and go to state 189
    estatuto                       shift and go to state 181
    lectura                        shift and go to state 183
    while                          shift and go to state 191
    condicion                      shift and go to state 182
    empty                          shift and go to state 95
    atom                           shift and go to state 186
    llamada_func                   shift and go to state 179
    ciclo_cond                     shift and go to state 190
    escritura                      shift and go to state 193

state 233

    (120) ciclo_cond -> ciclo_cond ELSE IF PIZQ . exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (75) exp_b -> . negacion op_exp_b
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (123) empty -> .

  ! shift/reduce conflict for NOT resolved as shift
    NOT             shift and go to state 101
    PIZQ            reduce using rule 123 (empty -> .)
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    CTE_STR         reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    MENOS           reduce using rule 123 (empty -> .)
    MAS             reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! NOT             [ reduce using rule 123 (empty -> .) ]

    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    termino_bool                   shift and go to state 114
    exp_bool                       shift and go to state 240
    empty                          shift and go to state 173

state 234

    (122) escritura -> OUTPUT PIZQ exp PDER . PYC

    PYC             shift and go to state 241


state 235

    (70) while -> WHILE PIZQ exp_bool PDER LLIZQ . ciclo_estatuto LLDER
    (43) ciclo_estatuto -> . empty
    (44) ciclo_estatuto -> . ciclo_estatuto estatuto
    (123) empty -> .

    LLDER           reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    OUTPUT          reduce using rule 123 (empty -> .)
    INPUT           reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)

    ciclo_estatuto                 shift and go to state 242
    empty                          shift and go to state 156

state 236

    (108) for -> FOR PIZQ asignacion exp_bool PYC . atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr

    ID              shift and go to state 120
    THIS            shift and go to state 117

    atom                           shift and go to state 243

state 237

    (121) lectura -> INPUT PIZQ atom PDER PYC .

    LLDER           reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    WHILE           reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    FOR             reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    OUTPUT          reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    INPUT           reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    RETURN          reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    ID              reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    THIS            reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)
    IF              reduce using rule 121 (lectura -> INPUT PIZQ atom PDER PYC .)


state 238

    (119) ciclo_cond -> IF PIZQ exp_bool PDER LLIZQ . ciclo_estatuto LLDER
    (43) ciclo_estatuto -> . empty
    (44) ciclo_estatuto -> . ciclo_estatuto estatuto
    (123) empty -> .

    LLDER           reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    OUTPUT          reduce using rule 123 (empty -> .)
    INPUT           reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)

    ciclo_estatuto                 shift and go to state 244
    empty                          shift and go to state 156

state 239

    (118) condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .

    LLDER           reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    WHILE           reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    FOR             reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    OUTPUT          reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    INPUT           reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    RETURN          reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    ID              reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    THIS            reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)
    IF              reduce using rule 118 (condicion -> ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER .)


state 240

    (120) ciclo_cond -> ciclo_cond ELSE IF PIZQ exp_bool . PDER LLIZQ ciclo_estatuto LLDER
    (72) exp_bool -> exp_bool . OR termino_bool

    PDER            shift and go to state 245
    OR              shift and go to state 151


state 241

    (122) escritura -> OUTPUT PIZQ exp PDER PYC .

    LLDER           reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    WHILE           reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    FOR             reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    OUTPUT          reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    INPUT           reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    RETURN          reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    ID              reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    THIS            reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)
    IF              reduce using rule 122 (escritura -> OUTPUT PIZQ exp PDER PYC .)


state 242

    (70) while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto . LLDER
    (44) ciclo_estatuto -> ciclo_estatuto . estatuto
    (45) estatuto -> . while
    (46) estatuto -> . for
    (47) estatuto -> . asignacion
    (48) estatuto -> . condicion
    (49) estatuto -> . escritura
    (50) estatuto -> . lectura
    (51) estatuto -> . llamada_func
    (52) estatuto -> . return
    (70) while -> . WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (108) for -> . FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (113) asignacion -> . atom IGUAL exp PYC
    (118) condicion -> . ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER
    (122) escritura -> . OUTPUT PIZQ exp PDER PYC
    (121) lectura -> . INPUT PIZQ atom PDER PYC
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (69) return -> . RETURN exp PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (119) ciclo_cond -> . IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> . ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LLDER           shift and go to state 246
    WHILE           shift and go to state 177
    FOR             shift and go to state 185
    OUTPUT          shift and go to state 192
    INPUT           shift and go to state 187
    RETURN          shift and go to state 176
    ID              shift and go to state 99
    THIS            shift and go to state 93
    IF              shift and go to state 188

  ! ID              [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    return                         shift and go to state 178
    for                            shift and go to state 180
    asignacion                     shift and go to state 189
    estatuto                       shift and go to state 181
    ciclo_cond                     shift and go to state 190
    while                          shift and go to state 191
    condicion                      shift and go to state 182
    empty                          shift and go to state 95
    atom                           shift and go to state 186
    llamada_func                   shift and go to state 179
    lectura                        shift and go to state 183
    escritura                      shift and go to state 193

state 243

    (108) for -> FOR PIZQ asignacion exp_bool PYC atom . IGUAL exp PDER LLIZQ ciclo_estatuto LLDER

    IGUAL           shift and go to state 247


state 244

    (119) ciclo_cond -> IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto . LLDER
    (44) ciclo_estatuto -> ciclo_estatuto . estatuto
    (45) estatuto -> . while
    (46) estatuto -> . for
    (47) estatuto -> . asignacion
    (48) estatuto -> . condicion
    (49) estatuto -> . escritura
    (50) estatuto -> . lectura
    (51) estatuto -> . llamada_func
    (52) estatuto -> . return
    (70) while -> . WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (108) for -> . FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (113) asignacion -> . atom IGUAL exp PYC
    (118) condicion -> . ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER
    (122) escritura -> . OUTPUT PIZQ exp PDER PYC
    (121) lectura -> . INPUT PIZQ atom PDER PYC
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (69) return -> . RETURN exp PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (119) ciclo_cond -> . IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> . ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LLDER           shift and go to state 248
    WHILE           shift and go to state 177
    FOR             shift and go to state 185
    OUTPUT          shift and go to state 192
    INPUT           shift and go to state 187
    RETURN          shift and go to state 176
    ID              shift and go to state 99
    THIS            shift and go to state 93
    IF              shift and go to state 188

  ! ID              [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    return                         shift and go to state 178
    for                            shift and go to state 180
    asignacion                     shift and go to state 189
    estatuto                       shift and go to state 181
    ciclo_cond                     shift and go to state 190
    while                          shift and go to state 191
    condicion                      shift and go to state 182
    empty                          shift and go to state 95
    atom                           shift and go to state 186
    llamada_func                   shift and go to state 179
    lectura                        shift and go to state 183
    escritura                      shift and go to state 193

state 245

    (120) ciclo_cond -> ciclo_cond ELSE IF PIZQ exp_bool PDER . LLIZQ ciclo_estatuto LLDER

    LLIZQ           shift and go to state 249


state 246

    (70) while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .

    LLDER           reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    WHILE           reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    FOR             reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    OUTPUT          reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    INPUT           reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    RETURN          reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    ID              reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    THIS            reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)
    IF              reduce using rule 70 (while -> WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)


state 247

    (108) for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL . exp PDER LLIZQ ciclo_estatuto LLDER
    (63) exp -> . exp_bool
    (64) exp -> . exp_arit
    (65) exp -> . exp_str
    (66) exp -> . exp_objeto
    (71) exp_bool -> . termino_bool
    (72) exp_bool -> . exp_bool OR termino_bool
    (92) exp_arit -> . termino
    (93) exp_arit -> . exp_arit MAS termino
    (94) exp_arit -> . exp_arit MENOS termino
    (109) exp_str -> . CTE_STR
    (110) exp_str -> . CTE_CHAR
    (111) exp_str -> . atom
    (112) exp_str -> . llamada_func
    (67) exp_objeto -> . atom
    (68) exp_objeto -> . NEW ID PIZQ PDER
    (73) termino_bool -> . exp_b
    (74) termino_bool -> . termino_bool AND exp_b
    (95) termino -> . factor
    (96) termino -> . termino POR factor
    (97) termino -> . termino ENTRE factor
    (98) termino -> . termino MOD factor
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (75) exp_b -> . negacion op_exp_b
    (99) factor -> . PIZQ exp_arit PDER
    (100) factor -> . factor_oper_op factor_cte_op
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (76) negacion -> . empty
    (77) negacion -> . NOT
    (101) factor_oper_op -> . empty
    (102) factor_oper_op -> . MENOS
    (103) factor_oper_op -> . MAS
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PIZQ resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CTE_STR resolved as shift
  ! shift/reduce conflict for CTE_CHAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for MAS resolved as shift
    CTE_STR         shift and go to state 108
    CTE_CHAR        shift and go to state 106
    NEW             shift and go to state 102
    ID              shift and go to state 99
    THIS            shift and go to state 93
    PIZQ            shift and go to state 63
    NOT             shift and go to state 101
    MENOS           shift and go to state 65
    MAS             shift and go to state 62
    TRUE            reduce using rule 123 (empty -> .)
    FALSE           reduce using rule 123 (empty -> .)
    CTE_NUMERAL     reduce using rule 123 (empty -> .)
    CTE_REAL        reduce using rule 123 (empty -> .)

  ! ID              [ reduce using rule 123 (empty -> .) ]
  ! PIZQ            [ reduce using rule 123 (empty -> .) ]
  ! THIS            [ reduce using rule 123 (empty -> .) ]
  ! CTE_STR         [ reduce using rule 123 (empty -> .) ]
  ! CTE_CHAR        [ reduce using rule 123 (empty -> .) ]
  ! NOT             [ reduce using rule 123 (empty -> .) ]
  ! MENOS           [ reduce using rule 123 (empty -> .) ]
  ! MAS             [ reduce using rule 123 (empty -> .) ]

    termino                        shift and go to state 66
    negacion                       shift and go to state 103
    exp_b                          shift and go to state 104
    exp_str                        shift and go to state 105
    factor                         shift and go to state 67
    empty                          shift and go to state 107
    exp_bool                       shift and go to state 115
    atom                           shift and go to state 198
    llamada_func                   shift and go to state 110
    exp_objeto                     shift and go to state 195
    caller                         shift and go to state 94
    exp_arit                       shift and go to state 112
    exp                            shift and go to state 250
    termino_bool                   shift and go to state 114
    factor_oper_op                 shift and go to state 68

state 248

    (119) ciclo_cond -> IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .

    ELSE            reduce using rule 119 (ciclo_cond -> IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)


state 249

    (120) ciclo_cond -> ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ . ciclo_estatuto LLDER
    (43) ciclo_estatuto -> . empty
    (44) ciclo_estatuto -> . ciclo_estatuto estatuto
    (123) empty -> .

    LLDER           reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    OUTPUT          reduce using rule 123 (empty -> .)
    INPUT           reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)

    ciclo_estatuto                 shift and go to state 251
    empty                          shift and go to state 156

state 250

    (108) for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp . PDER LLIZQ ciclo_estatuto LLDER

    PDER            shift and go to state 252


state 251

    (120) ciclo_cond -> ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto . LLDER
    (44) ciclo_estatuto -> ciclo_estatuto . estatuto
    (45) estatuto -> . while
    (46) estatuto -> . for
    (47) estatuto -> . asignacion
    (48) estatuto -> . condicion
    (49) estatuto -> . escritura
    (50) estatuto -> . lectura
    (51) estatuto -> . llamada_func
    (52) estatuto -> . return
    (70) while -> . WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (108) for -> . FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (113) asignacion -> . atom IGUAL exp PYC
    (118) condicion -> . ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER
    (122) escritura -> . OUTPUT PIZQ exp PDER PYC
    (121) lectura -> . INPUT PIZQ atom PDER PYC
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (69) return -> . RETURN exp PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (119) ciclo_cond -> . IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> . ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LLDER           shift and go to state 253
    WHILE           shift and go to state 177
    FOR             shift and go to state 185
    OUTPUT          shift and go to state 192
    INPUT           shift and go to state 187
    RETURN          shift and go to state 176
    ID              shift and go to state 99
    THIS            shift and go to state 93
    IF              shift and go to state 188

  ! ID              [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    return                         shift and go to state 178
    asignacion                     shift and go to state 189
    for                            shift and go to state 180
    estatuto                       shift and go to state 181
    lectura                        shift and go to state 183
    while                          shift and go to state 191
    condicion                      shift and go to state 182
    empty                          shift and go to state 95
    atom                           shift and go to state 186
    llamada_func                   shift and go to state 179
    ciclo_cond                     shift and go to state 190
    escritura                      shift and go to state 193

state 252

    (108) for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER . LLIZQ ciclo_estatuto LLDER

    LLIZQ           shift and go to state 254


state 253

    (120) ciclo_cond -> ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .

    ELSE            reduce using rule 120 (ciclo_cond -> ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER .)


state 254

    (108) for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ . ciclo_estatuto LLDER
    (43) ciclo_estatuto -> . empty
    (44) ciclo_estatuto -> . ciclo_estatuto estatuto
    (123) empty -> .

    LLDER           reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    OUTPUT          reduce using rule 123 (empty -> .)
    INPUT           reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    THIS            reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)

    ciclo_estatuto                 shift and go to state 255
    empty                          shift and go to state 156

state 255

    (108) for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto . LLDER
    (44) ciclo_estatuto -> ciclo_estatuto . estatuto
    (45) estatuto -> . while
    (46) estatuto -> . for
    (47) estatuto -> . asignacion
    (48) estatuto -> . condicion
    (49) estatuto -> . escritura
    (50) estatuto -> . lectura
    (51) estatuto -> . llamada_func
    (52) estatuto -> . return
    (70) while -> . WHILE PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (108) for -> . FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER
    (113) asignacion -> . atom IGUAL exp PYC
    (118) condicion -> . ciclo_cond ELSE LLIZQ ciclo_estatuto LLDER
    (122) escritura -> . OUTPUT PIZQ exp PDER PYC
    (121) lectura -> . INPUT PIZQ atom PDER PYC
    (53) llamada_func -> . caller ID PIZQ exp_op PDER PYC
    (69) return -> . RETURN exp PYC
    (114) atom -> . ID arreglo atributo_arr
    (115) atom -> . ID arreglo
    (116) atom -> . THIS atributo_arr
    (119) ciclo_cond -> . IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (120) ciclo_cond -> . ciclo_cond ELSE IF PIZQ exp_bool PDER LLIZQ ciclo_estatuto LLDER
    (54) caller -> . empty
    (55) caller -> . THIS PUNTO
    (56) caller -> . ID arreglo PUNTO
    (123) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LLDER           shift and go to state 256
    WHILE           shift and go to state 177
    FOR             shift and go to state 185
    OUTPUT          shift and go to state 192
    INPUT           shift and go to state 187
    RETURN          shift and go to state 176
    ID              shift and go to state 99
    THIS            shift and go to state 93
    IF              shift and go to state 188

  ! ID              [ reduce using rule 123 (empty -> .) ]

    caller                         shift and go to state 94
    return                         shift and go to state 178
    for                            shift and go to state 180
    asignacion                     shift and go to state 189
    estatuto                       shift and go to state 181
    ciclo_cond                     shift and go to state 190
    while                          shift and go to state 191
    condicion                      shift and go to state 182
    empty                          shift and go to state 95
    atom                           shift and go to state 186
    llamada_func                   shift and go to state 179
    lectura                        shift and go to state 183
    escritura                      shift and go to state 193

state 256

    (108) for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .

    LLDER           reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    WHILE           reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    FOR             reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    OUTPUT          reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    INPUT           reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    RETURN          reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    ID              reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    THIS            reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)
    IF              reduce using rule 108 (for -> FOR PIZQ asignacion exp_bool PYC atom IGUAL exp PDER LLIZQ ciclo_estatuto LLDER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VISIBLE in state 13 resolved as shift
WARNING: shift/reduce conflict for HIDDEN in state 13 resolved as shift
WARNING: shift/reduce conflict for HIDDEN in state 22 resolved as shift
WARNING: shift/reduce conflict for VISIBLE in state 22 resolved as shift
WARNING: shift/reduce conflict for WITHOUT in state 24 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 71 resolved as shift
WARNING: shift/reduce conflict for THIS in state 71 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 71 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 71 resolved as shift
WARNING: shift/reduce conflict for NOT in state 71 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 71 resolved as shift
WARNING: shift/reduce conflict for MAS in state 71 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 103 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 103 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 103 resolved as shift
WARNING: shift/reduce conflict for THIS in state 103 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 103 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT in state 103 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 103 resolved as shift
WARNING: shift/reduce conflict for MAS in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 139 resolved as shift
WARNING: shift/reduce conflict for NOT in state 139 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 139 resolved as shift
WARNING: shift/reduce conflict for MAS in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 148 resolved as shift
WARNING: shift/reduce conflict for NOT in state 150 resolved as shift
WARNING: shift/reduce conflict for NOT in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 158 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for THIS in state 158 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 158 resolved as shift
WARNING: shift/reduce conflict for NOT in state 158 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 158 resolved as shift
WARNING: shift/reduce conflict for MAS in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 174 resolved as shift
WARNING: shift/reduce conflict for ID in state 176 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 176 resolved as shift
WARNING: shift/reduce conflict for THIS in state 176 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 176 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 176 resolved as shift
WARNING: shift/reduce conflict for NOT in state 176 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 176 resolved as shift
WARNING: shift/reduce conflict for MAS in state 176 resolved as shift
WARNING: shift/reduce conflict for NOT in state 207 resolved as shift
WARNING: shift/reduce conflict for ID in state 209 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 209 resolved as shift
WARNING: shift/reduce conflict for THIS in state 209 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 209 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 209 resolved as shift
WARNING: shift/reduce conflict for NOT in state 209 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 209 resolved as shift
WARNING: shift/reduce conflict for MAS in state 209 resolved as shift
WARNING: shift/reduce conflict for NOT in state 211 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 213 resolved as shift
WARNING: shift/reduce conflict for THIS in state 213 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 213 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 213 resolved as shift
WARNING: shift/reduce conflict for NOT in state 213 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 213 resolved as shift
WARNING: shift/reduce conflict for MAS in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 215 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 215 resolved as shift
WARNING: shift/reduce conflict for THIS in state 215 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 215 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 215 resolved as shift
WARNING: shift/reduce conflict for NOT in state 215 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 215 resolved as shift
WARNING: shift/reduce conflict for MAS in state 215 resolved as shift
WARNING: shift/reduce conflict for NOT in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 232 resolved as shift
WARNING: shift/reduce conflict for NOT in state 233 resolved as shift
WARNING: shift/reduce conflict for ID in state 242 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for PIZQ in state 247 resolved as shift
WARNING: shift/reduce conflict for THIS in state 247 resolved as shift
WARNING: shift/reduce conflict for CTE_STR in state 247 resolved as shift
WARNING: shift/reduce conflict for CTE_CHAR in state 247 resolved as shift
WARNING: shift/reduce conflict for NOT in state 247 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 247 resolved as shift
WARNING: shift/reduce conflict for MAS in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 251 resolved as shift
WARNING: shift/reduce conflict for ID in state 255 resolved as shift
WARNING: reduce/reduce conflict in state 21 resolved using rule (ciclo_func -> empty)
WARNING: rejected rule (acceso -> empty) in state 21
WARNING: reduce/reduce conflict in state 107 resolved using rule (caller -> empty)
WARNING: rejected rule (negacion -> empty) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (negacion -> empty)
WARNING: rejected rule (factor_oper_op -> empty) in state 107
WARNING: reduce/reduce conflict in state 107 resolved using rule (caller -> empty)
WARNING: rejected rule (factor_oper_op -> empty) in state 107
WARNING: reduce/reduce conflict in state 109 resolved using rule (exp_objeto -> atom)
WARNING: rejected rule (exp_str -> atom) in state 109
WARNING: reduce/reduce conflict in state 163 resolved using rule (negacion -> empty)
WARNING: rejected rule (factor_oper_op -> empty) in state 163
WARNING: reduce/reduce conflict in state 197 resolved using rule (caller -> empty)
WARNING: rejected rule (negacion -> empty) in state 197
WARNING: reduce/reduce conflict in state 197 resolved using rule (negacion -> empty)
WARNING: rejected rule (factor_oper_op -> empty) in state 197
WARNING: reduce/reduce conflict in state 197 resolved using rule (caller -> empty)
WARNING: rejected rule (factor_oper_op -> empty) in state 197
WARNING: reduce/reduce conflict in state 198 resolved using rule (exp_objeto -> atom)
WARNING: rejected rule (exp_str -> atom) in state 198
